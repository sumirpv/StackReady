{"version":3,"sources":["pages/assest/darth-vader.jpeg","pages/assest/home-image.jpg","pages/Home.js","components/Header.js","components/Footer.js","CodeSnippet.js","pages/HtmlList.js","pages/JavaScriptList.js","pages/ReactList.js","pages/ReduxList.js","pages/Python.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","Home","React","createElement","Container","sx","backgroundColor","borderRadius","padding","boxShadow","marginTop","textAlign","Box","component","src","DarthVader","alt","width","height","mb","Typography","variant","gutterBottom","color","display","flexDirection","gap","Link","RouterLink","to","underline","Header","AppBar","position","marginBottom","Toolbar","flexGrow","Button","Footer","CodeSnippet","_ref","language","code","SyntaxHighlighter","style","lightTheme","HtmlList","expanded","setExpanded","useState","console","log","Accordion","onChange","handleExpansion","prevExpanded","AccordionSummary","expandIcon","ExpandMoreIcon","aria-controls","id","AccordionDetails","TableContainer","Paper","Table","TableHead","TableRow","TableCell","TableBody","JavaScriptList","href","target","rel","ReactList","App","Fragment","minHeight","Routes","Route","path","element","ReduxList","PythonList","reportWebVitals","onPerfEntry","Function","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","HashRouter"],"mappings":"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","file":"static/js/main.1c343fdd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/darth-vader.9644b8b1.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/home-image.9a5f6f62.jpg\";","import React from \"react\";\nimport { Container, Typography, Box, Link } from \"@mui/material\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport HomeImage from \"./assest/home-image.jpg\";\nimport DarthVader from \"./assest/darth-vader.jpeg\";\n\nfunction Home() {\n  return (\n    <Container\n      sx={{\n        backgroundColor: \"#f5f5f5\",\n        borderRadius: 2,\n        padding: 4,\n        boxShadow: 3,\n        marginTop: 5,\n        textAlign: \"center\",\n      }}\n    >\n      <Box\n        component=\"img\"\n        src={DarthVader}\n        alt=\"Welcome\"\n        sx={{ width: \"50%\", height: \"auto\", borderRadius: 2, mb: 3 }}\n      />\n      <Typography variant=\"h4\" gutterBottom color=\"primary\">\n        Welcome to the Home Page\n      </Typography>\n      <Typography variant=\"body1\" sx={{ color: \"text.secondary\", mb: 3 }}>\n        Explore the different sections of our application below.\n      </Typography>\n\n      <Box sx={{ backgroundColor: \"#e3f2fd\", padding: 3, borderRadius: 2 }}>\n        <Typography variant=\"h6\" gutterBottom color=\"text.primary\">\n          Navigate to:\n        </Typography>\n        <Box\n          component=\"div\"\n          sx={{ display: \"flex\", flexDirection: \"column\", gap: 1 }}\n        >\n          <Typography variant=\"body1\">\n            <Link\n              component={RouterLink}\n              to=\"/htmlList\"\n              color=\"secondary\"\n              underline=\"hover\"\n            >\n              HTML List\n            </Link>\n          </Typography>\n          <Typography variant=\"body1\">\n            <Link\n              component={RouterLink}\n              to=\"/javaScriptList\"\n              color=\"secondary\"\n              underline=\"hover\"\n            >\n              JavaScript List\n            </Link>\n          </Typography>\n          <Typography variant=\"body1\">\n            <Link\n              component={RouterLink}\n              to=\"/reactList\"\n              color=\"secondary\"\n              underline=\"hover\"\n            >\n              React List\n            </Link>\n          </Typography>\n          <Typography variant=\"body1\">\n            <Link\n              component={RouterLink}\n              to=\"/reduxList\"\n              color=\"secondary\"\n              underline=\"hover\"\n            >\n              Redux List\n            </Link>\n          </Typography>\n          <Typography variant=\"body1\">\n            <Link\n              component={RouterLink}\n              to=\"/pythonList\"\n              color=\"secondary\"\n              underline=\"hover\"\n            >\n              Python List\n            </Link>\n          </Typography>\n        </Box>\n      </Box>\n    </Container>\n  );\n}\n\nexport default Home;\n\n// import React from \"react\";\n// import { Container, Typography, Box, Link } from \"@mui/material\";\n// import { Link as RouterLink } from \"react-router-dom\";\n\n// function Home() {\n//   return (\n//     <Container>\n//       <Typography variant=\"h4\" gutterBottom>\n//         Welcome to the Home Page\n//       </Typography>\n//       <Typography variant=\"body1\">\n//         This is the home page of your app.\n//       </Typography>\n//       <Box sx={{ marginTop: 3 }}>\n//         <Typography variant=\"h6\" gutterBottom>\n//           Navigate to:\n//         </Typography>\n//         <Box component=\"div\">\n//           <Typography variant=\"body1\">\n//             <Link component={RouterLink} to=\"/htmlList\">\n//               HTMLList\n//             </Link>\n//           </Typography>\n//           <Typography variant=\"body1\">\n//             <Link component={RouterLink} to=\"/javaScriptList\">\n//               JavaScriptList\n//             </Link>\n//           </Typography>\n//           <Typography variant=\"body1\">\n//             <Link component={RouterLink} to=\"/reactList\">\n//               ReactList\n//             </Link>\n//           </Typography>\n//           <Typography variant=\"body1\">\n//             <Link component={RouterLink} to=\"/reduxList\">\n//               ReduxList\n//             </Link>\n//           </Typography>\n//           <Typography variant=\"body1\">\n//             <Link component={RouterLink} to=\"/pythonList\">\n//               PythonList\n//             </Link>\n//           </Typography>\n//         </Box>\n//       </Box>\n//     </Container>\n//   );\n// }\n\n// export default Home;\n","import React from \"react\";\nimport { AppBar, Toolbar, Typography, Button } from \"@mui/material\";\nimport { Link } from \"react-router-dom\";\n\nfunction Header() {\n  return (\n    <AppBar position=\"static\" sx={{ marginBottom: \"20px\" }}>\n      <Toolbar>\n        <Typography variant=\"h6\" sx={{ flexGrow: 1 }}>\n          My App\n        </Typography>\n        <Button color=\"inherit\" component={Link} to=\"/\">\n          Home\n        </Button>\n        <Button color=\"inherit\" component={Link} to=\"/about\">\n          About\n        </Button>\n        <Button color=\"inherit\" component={Link} to=\"/contact\">\n          Contact\n        </Button>\n      </Toolbar>\n    </AppBar>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport { Box, Typography } from \"@mui/material\";\n\nfunction Footer() {\n  return (\n    <Box\n      sx={{\n        // position: 'sticky',\n        // bottom: 0,\n        // left: 0,\n        marginTop: \"20px\",\n        width: \"100%\",\n        backgroundColor: \"primary.main\",\n        color: \"white\",\n        textAlign: \"center\",\n        padding: \"10px 0\",\n      }}\n    >\n      <Typography variant=\"body1\">\n        © 2024 My App. All rights reserved.\n      </Typography>\n    </Box>\n  );\n}\n\nexport default Footer;\n","import React from \"react\";\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\n// import { dark } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport { prism as lightTheme } from 'react-syntax-highlighter/dist/esm/styles/prism';\n\n\nconst CodeSnippet = ({ language, code }) => {\n  return (\n    <SyntaxHighlighter language={language} style={lightTheme}>\n      {code}\n    </SyntaxHighlighter>\n  );\n};\n\nexport default CodeSnippet;\n","import React, { useState } from \"react\";\nimport {\n  Container,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails,\n  Typography,\n  TableContainer,\n  Table,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableBody,\n  Paper,\n} from \"@mui/material\";\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\nimport CodeSnippet from \"../CodeSnippet\";\n\nconst HtmlList = () => {\n  const [expanded, setExpanded] = useState(false);\n\n  const handleExpansion = () => {\n    setExpanded((prevExpanded) => !prevExpanded);\n  };\n  console.log(\"***************\");\n\n  return (\n    <Container>\n      <Accordion expanded={expanded} onChange={handleExpansion}>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>HTML</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            HTML stands for HyperText Markup Language. It is a standard text\n            formatting language used for developing web pages released in 1993.\n            HTML is a language that is interpreted by the browser and it tells\n            the browser what to display and how to display.\n            <br />\n            HTML alone is not sufficient for a web developer because HTML only\n            defines the structure of the data that will be rendered on the\n            browser in a webpage, to make it visually appealing and to make it\n            functional, we will need to use CSS and Javascript respectively.\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>Tags and Attributes</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            {`Tags are the primary component of the HTML that defines how the content will be structured/ formatted, whereas Attributes are used along with the HTML tags to define the characteristics of the element. For example, <p align=” center”>Interview questions</p>, in this the ‘align’ is the attribute using which we will align the paragraph to show in the center of the view.\n            `}\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>Void elements</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            {`HTML elements which do not have closing tags or do not need to be\n            closed are Void elements. For Example <br />, <img />, <hr />, etc.`}\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>Nesting webpages</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            {`we can display a web page inside another HTML web page. HTML provides a tag <iframe> using which we can achieve this functionality.`}\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n              <iframe src=”url of the web page to embed” />\n              `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>HTML Entities</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            {`In HTML some characters are reserved like ‘<’, ‘>’, ‘/’, etc. To use these characters in our webpage we need to use the character entities called HTML Entities. Below are a few mapping between the reserved character and its respective entity character to be used.`}\n          </Typography>\n          <TableContainer component={Paper} variant=\"outlined\">\n            <Table>\n              <TableHead>\n                <TableRow>\n                  <TableCell>Character</TableCell>\n                  <TableCell>Entity Name</TableCell>\n                  <TableCell>Entity Number</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                <TableRow>\n                  <TableCell>{`<`}</TableCell>\n                  <TableCell>{`&lt;`}</TableCell>\n                  <TableCell>{`&#60;`}</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>{`>`}</TableCell>\n                  <TableCell>{`&gt;`}</TableCell>\n                  <TableCell>{`&#62;`}</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>{`&`}</TableCell>\n                  <TableCell>{`&amp;`}</TableCell>\n                  <TableCell>{`&#38;`}</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>{`(non-breaking space) Eg. 10  PM`}</TableCell>\n                  <TableCell>{`&nbsp; Eg. <p>10&nbsp&nbspPM</p>`}</TableCell>\n                  <TableCell>{`&#160;`}</TableCell>\n                </TableRow>\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>Lists in HTML</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            {`HTML provides several types of lists to organize content, primarily unordered lists (<ul>), ordered lists (<ol>), and definition lists (<dl>)`}\n            <ul>\n              <li>\n                <strong> {`Unordered List (<ul>)`}:</strong>\n                <br />\n                An unordered list is used to group a set of items in no\n                particular order. Items in an unordered list are typically\n                displayed with bullet points.\n                <CodeSnippet\n                  language=\"javascript\"\n                  code={`\n                    <ul>\n                      <li>Item 1</li>\n                      <li>Item 2</li>\n                      <li>Item 3</li>\n                    </ul>\n                 `}\n                />\n              </li>\n              <li>\n                <strong>{`Ordered List (<ol>):`}</strong> <br />\n                An ordered list is used to group a set of items in a specific\n                order. The items in the list are numbered by default.\n                <CodeSnippet\n                  language=\"javascript\"\n                  code={`\n                    <ol>\n                      <li>First Item</li>\n                      <li>Second Item</li>\n                      <li>Third Item</li>\n                    </ol>\n                 `}\n                />\n              </li>\n              <li>\n                <strong>{`Definition List (<dl>):`}</strong> <br />\n                {`A definition list is used for terms and their corresponding definitions. It consists of <dt> (definition term) and <dd> (definition description).`}\n                <CodeSnippet\n                  language=\"javascript\"\n                  code={`\n                    <dl>\n                      <dt>HTML</dt>\n                      <dd>A markup language for creating web pages.</dd>\n\n                      <dt>CSS</dt>\n                      <dd>A style sheet language for designing web pages.</dd>\n                    </dl>\n                 `}\n                />\n              </li>\n            </ul>\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>‘class’ attribute</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            The class attribute is used to specify the class name for an HTML\n            element. Multiple elements in HTML can have the same class value.\n            Also, it is mainly used to associate the styles written in the\n            stylesheet with the HTML elements.\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>‘id’ attribute vs ‘class’ attribute</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            Multiple elements in HTML can have the same class value, whereas a\n            value of id attribute of one element cannot be associated with\n            another HTML element.\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>multipart/form-data</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            multipart/form-data is a type of encoding used when submitting forms\n            that include files (or binary data) via HTTP. It allows for sending\n            multiple pieces of data, like text inputs, files, or other binary\n            data, in a single HTTP request.\n            <br />\n            <strong>When to Use</strong> <br />\n            When a form contains file uploads (e.g., images, PDFs).When you need\n            to send large binary data in combination with textual data.\n            <br />\n            <strong>Example</strong>\n            <br />\n            When submitting a form that includes a file, you need to set the\n            enctype attribute of the form to \"multipart/form-data\".\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                <form action=\"/upload\" method=\"POST\" enctype=\"multipart/form-data\">\n                  <label for=\"username\">Username:</label>\n                  <input type=\"text\" name=\"username\" id=\"username\" />\n\n                  <label for=\"file\">Upload File:</label>\n                  <input type=\"file\" name=\"file\" id=\"file\" />\n\n                  <button type=\"submit\">Submit</button>\n                </form>\n                 `}\n            />\n            enctype=\"multipart/form-data\": This tells the browser to encode the\n            form data as multipart/form-data, which is required for file\n            uploads. The form contains a text input (username) and a file input\n            (file).\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>HTML layout structure</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            <ul>\n              <li>{`<!DOCTYPE html>: Declares the document type and version of HTML.`}</li>\n              <li>{`<html>: Root element of the HTML document.`}</li>\n              <li>{`<head>: Contains metadata and links to external resources.`}</li>\n              <li>{`<body>: Contains the content of the document.`}</li>\n            </ul>\n          </Typography>\n          <CodeSnippet\n            language=\"javascript\"\n            code={`\n              <!DOCTYPE html>\n              <html lang=\"en\">\n              <head>\n                <meta charset=\"UTF-8\">\n                <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n                <title>Document Title</title>\n                <link rel=\"stylesheet\" href=\"styles.css\">\n                <script src=\"script.js\" defer></script>\n              </head>\n              <body>\n                <!-- Content goes here -->\n              </body>\n              </html>\n                 `}\n          />\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>Optimize website assets loading</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            Optimizing website assets loading is crucial for improving page\n            performance, reducing load times, and enhancing the overall user\n            experience. Here are some effective strategies for optimizing asset\n            loading:\n            <ul>\n              <li>\n                <strong>CDN(Content Delivery Network) hosting :</strong>{\" \"}\n                Distribute your static assets (images, CSS, JavaScript) across\n                multiple servers located around the world to reduce latency and\n                load times.\n              </li>\n              <li>\n                <strong>File compression:</strong>\n                This is a method that helps to reduce the size of an asset to\n                reduce the data transfer\n                <br />\n                <strong>GZIP Compression - </strong>\n                Compresses text files (HTML, CSS, JavaScript) on the server side\n                before sending them to the client.\n                <br />\n                <strong>Brotli Compression - </strong>A newer compression\n                algorithm that often achieves better compression rates than\n                GZIP.\n              </li>\n              <li>\n                <strong>File concatenation:</strong>Concatenating CSS and\n                JavaScript files reduces the number of HTTP requests by\n                combining multiple files into one. This can improve page load\n                times.\n                <br />\n                <ul>\n                  <strong>Tools</strong>\n                  <li>\n                    <strong>Webpack:</strong> A popular module bundler for\n                    JavaScript applications. It can concatenate files and also\n                    handle various other optimizations.\n                  </li>\n                  <li>\n                    <strong>Gulp:</strong> A task runner that can concatenate\n                    files as part of a build process.\n                  </li>\n                  <li>\n                    <strong>Parcel:</strong> A zero-configuration web\n                    application bundler.\n                  </li>\n                </ul>\n              </li>\n              <li>\n                <strong>Minify scripts:</strong> This reduces the overall file\n                size of js and CSS files\n              </li>\n              <li>\n                <strong>Parallel downloads:</strong> Hosting assets in multiple\n                subdomains can help to bypass the download limit of 6 assets per\n                domain of all modern browsers. This can be configured but most\n                general users never modify these settings.\n              </li>\n              <li>\n                <strong>Lazy Loading:</strong>Instead of loading all the assets\n                at once, the non-critical assets can be loaded on a need basis.\n                <ul>\n                  <li>\n                    <strong>Images:</strong>\n                    {`Use the loading=\"lazy\" attribute for <img> elements to defer loading images until they are in the viewport.`}\n                  </li>\n                  <CodeSnippet\n                    language=\"javascript\"\n                    code={`\n                      <img src=\"image.jpg\" alt=\"Description\" loading=\"lazy\">\n                 `}\n                  />\n                  <li>\n                    <strong>JavaScript:</strong>Dynamically load JavaScript\n                    files when needed using import() or libraries like\n                    RequireJS.\n                  </li>\n                </ul>\n              </li>\n            </ul>\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>Formatting tags</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            <ul>\n              <li>\n                <strong>{`<b>`}</strong> - makes text bold\n              </li>\n              <li>\n                <strong>{`<i> `}</strong>- makes text italic\n              </li>\n              <li>\n                <strong>{`<em>`}</strong> - makes text italic but with added\n                semantics importance\n              </li>\n              <li>\n                <strong>{`<big>`}</strong> - increases the font size of the text\n                by one unit\n              </li>\n              <li>\n                <strong>{`<small>`}</strong> - decreases the font size of the\n                text by one unit\n              </li>\n              <li>\n                <strong>{`<sub>`}</strong> - makes the text a subscript\n              </li>\n              <li>\n                <strong>{`<sup> `}</strong>- makes the text a superscript\n              </li>\n              <li>\n                <strong>{`<del>`}</strong> - displays as strike out text\n              </li>\n              <li>\n                <strong>{`<strong>`}</strong> - marks the text as important\n              </li>\n              <li>\n                <strong>{`<mark>`}</strong> - highlights the text\n              </li>\n              <li>\n                <strong>{`<ins>`}</strong> - displays as added text\n              </li>\n            </ul>\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>Different kinds of Doctypes</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            The three kinds of Doctypes which are available:\n            <ol>\n              <li>Strict Doctype</li>\n              <li>Transitional Doctype</li>\n              <li>Frameset Doctype</li>\n            </ol>\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>HTML tags and elements</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            No. HTML elements are defined by a starting tag, may contain some\n            content and a closing tag.For example, <h1>Heading 1</h1> is a HTML\n            element but just <h1> is a starting tag and </h1> is a closing tag.\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>Style sheet</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            A style sheet is used to build a consistent, transportable, and\n            well-designed style template. You can add these templates on several\n            different web pages. It describes the look and formatting of a\n            document written in markup language.\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>Multi-colored text on a web page</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            {`To create a multicolor text on a web page you can use\n            <font color=\"color\"> </font> for the specific texts you want to\n            color.`}\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>Change the color of the bullet</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            The color of the bullet is always the color of the first text of the\n            list. So, if you want to change the color of the bullet, you must\n            change the color of the text.\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>Separate a section of texts</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            Three tags are used to separate the texts.\n            <ul>\n              <li>{`<br> tag - Usually <br> tag is used to separate the line of text. It breaks the current line and conveys the flow to the next line`}</li>\n              <li>{`<p> tag - The <p> tag contains the text in the form of a new paragraph.`}</li>\n              <li>{`<blockquote> tag - It is used to define a large quoted section. If you have a large quotation, then put the entire text within <blockquote>.............</blockquote> tag.`}</li>\n            </ul>\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>Empty elements</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>{`HTML elements with no content are called empty elements. For example: <br>, <hr> etc.`}</Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>Span tag</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            The span tag is used for following things:\n            <ul>\n              <li>For adding color on text</li>\n              <li>For adding background on text</li>\n              <li>Highlight any color text</li>\n            </ul>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n          <p>\n            <span style=\"color:#ffffff;\">\n              In this page we use span.\n            </span>\n          </p>\n       `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>Iframe tag</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            An iframe is used to display a web page within a web page.\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n          <iframe src=\"URL\"></iframe>\n         `}\n            />\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n          <iframe src=\"demo_iframe.html\" width=\"200px\" height=\"200px\"></iframe>\n         `}\n            />\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n          <iframe src=\"http://www.javatpoint.com\" name=\"iframe_a\"></iframe>\n         `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>URL encoded in HTML</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>{`An URL is encoded to convert non-ASCII characters into a format that can be used over the Internet because a URL is sent over the Internet by using the ASCII character-set only. If a URL contains characters outside the ASCII set, the URL has to be converted. The non-ASCII characters are replaced with a \"%\" followed by hexadecimal digits.`}</Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>Canvas element</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            {`The <canvas> element is a container that is used to draw graphics on the web page using scripting language like JavaScript. It allows for dynamic and scriptable rendering of 2D shapes and bitmap images. There are several methods in canvas to draw paths, boxes, circles, text and add images.`}\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                <canvas id=\"myCanvas1\" width=\"300\" height=\"100\" style=\"border:2px solid;\">\n                  Your browser does not support the HTML5 canvas tag.\n                </canvas>\n              `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>SVG</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            SVG stands for Scalable Vector Graphics, an XML-based format for\n            creating two-dimensional vector images. SVGs are popular because\n            they are resolution-independent, meaning they look sharp at any size\n            without losing quality. They are widely used in web development for\n            icons, logos, illustrations, and other graphics.\n            <ul>\n              <li>\n                <strong>Scalability:</strong> SVG images can be scaled to any\n                size without losing quality, unlike raster images (e.g., JPEG,\n                PNG).\n              </li>\n              <li>\n                <strong>Interactivity:</strong> SVGs support CSS and JavaScript,\n                allowing animations, hover effects, and interactive elements.\n              </li>\n              <li>\n                <strong>Accessibility:</strong> Text within SVG files can be\n                indexed by search engines and read by screen readers, improving\n                accessibility.\n              </li>\n            </ul>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                //Inline SVG:\n                <svg width=\"100\" height=\"100\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <circle cx=\"50\" cy=\"50\" r=\"40\" stroke=\"black\" stroke-width=\"3\" fill=\"red\" />\n                </svg>\n\n                //External SVG File:\n                <img src=\"image.svg\" alt=\"My SVG\">\n              `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>Form element</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            list of 10 frequently used new elements\n            <ul>\n              <li>Color</li>\n              <li>Date</li>\n              <li>Datetime-local</li>\n              <li>Email</li>\n              <li>Time</li>\n              <li>Url</li>\n              <li>Range</li>\n              <li>Telephone</li>\n              <li>Number</li>\n              <li>Search</li>\n            </ul>\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>Type of video formats are supported by HTML5</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            <ul>\n              <li>mp4</li>\n              <li>WebM</li>\n              <li>Ogg</li>\n            </ul>\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>Audio tag supported in HTML 5</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            <ul>\n              <li>mp3</li>\n              <li>WAV</li>\n              <li>Ogg</li>\n            </ul>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                <audio controls>\n                  <source src=\"koyal.mp3\" type=\"audio/mpeg\">\n                  Your browser does not support the html audio tag.\n                </audio>\n              `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>Progress vs Meter tag</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            <strong>Progress Tag:</strong>\n            <ul>\n              <li>\n                Used to show the progress of a task (e.g., a file download or an\n                upload process).\n              </li>\n              <li>It indicates a completion percentage of a task.</li>\n              <li>\n                You can set its current value and maximum value, and the browser\n                will display a bar to represent the progress.\n              </li>\n            </ul>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                <progress value=\"40\" max=\"100\"></progress>\n              `}\n            />\n            <strong>Meter tag</strong>\n            <ul>\n              <li>\n                Used to represent a scalar measurement within a known range\n                (e.g., a temperature, a speedometer, or a battery level).\n              </li>\n              <li>{`Unlike <progress>, which shows how much of a task is done, <meter> is for representing a value that could fluctuate within a range.`}</li>\n            </ul>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                <meter value=\"0.7\" min=\"0\" max=\"1\" low=\"0.25\" high=\"0.75\" optimum=\"0.5\"></meter>\n              `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>Figure tag</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            {`The <figure> tag is used to group media content, like images, charts, or code snippets, with a caption or explanation. It's a semantic element that helps improve the structure of your webpage, making it clear that the content within the <figure> element is a single unit, often with a related <figcaption>`}\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                <figure>\n                  <img src=\"example.jpg\" alt=\"A beautiful landscape\">\n                  <figcaption>A beautiful landscape during sunset.</figcaption>\n                </figure>\n\n                //with code\n                <figure>\n                  <pre><code>console.log(\"Hello, World!\");</code></pre>\n                  <figcaption>A simple JavaScript code snippet.</figcaption>\n                </figure>\n            `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>Button tag</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            It is used to create clickable buttons that can trigger actions when\n            interacted with by the user. It's a versatile element commonly used\n            in forms, user interfaces, and applications.\n            <br />\n            Types of button\n            <ul>\n              <li>\n                <strong>Submit Button:</strong> If the button is used in a form,\n                its default type is \"submit\", which submits the form data when\n                clicked.\n              </li>\n              <li>\n                <strong>Reset Button:</strong> You can set the type to \"reset\"\n                to clear the form inputs.\n              </li>\n              <li>\n                <strong>Button:</strong> The default type is \"button\", which\n                does not submit the form and is typically used for custom\n                JavaScript actions.\n              </li>\n            </ul>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                <button type=\"submit\">Submit</button>\n                <button type=\"reset\">Reset</button>\n                <button type=\"button\" onclick=\"alert('Hello!')\">Click Me</button>\n              `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>Details and Summary tag</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            <strong>Details</strong>\n            <ul>\n              <li>{`The <details> element creates a disclosure widget from which the user can obtain additional information or controls.`}</li>\n              <li>\n                It can contain any HTML content, including text, images, and\n                other elements.\n              </li>\n            </ul>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                <details>\n                  <summary>What is HTML?</summary>\n                  <p>HTML stands for HyperText Markup Language. It is the standard language for creating web pages.</p>\n                </details>\n\n                <details>\n                  <summary>What is CSS?</summary>\n                  <p>CSS stands for Cascading Style Sheets. It is used to style and layout web pages.</p>\n                </details>\n              `}\n            />\n            <strong>Summary tag</strong>\n            <ul>\n              <li>{`The <summary> element provides a summary or heading for the <details> content. It is always visible, and clicking on it toggles the visibility of the <details> content.`}</li>\n            </ul>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                <details open>\n                  <summary>What is HTML?</summary>\n                  <p>HTML stands for HyperText Markup Language...</p>\n                </details>\n              `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>Tags from HTML4 to HTML5</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            <TableContainer component={Paper} variant=\"outlined\">\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>HTML4</TableCell>\n                    <TableCell>HTML5</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  <TableRow>\n                    <TableCell>{`<div id=\"header\">`}</TableCell>\n                    <TableCell>{`<header>`}</TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell>{`<div id=\"menu\">`}</TableCell>\n                    <TableCell>{`<nav>`}</TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell>{`<div id=\"content\">`}</TableCell>\n                    <TableCell>{`<section>`}</TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell>{`<div id=\"post\">`}</TableCell>\n                    <TableCell>{`<article>`}</TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell>{`<div id=\"footer\">`}</TableCell>\n                    <TableCell>{`<footer>`}</TableCell>\n                  </TableRow>\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>{`<!DOCTYPE html>`}</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            {`I do not put <!DOCTYPE html> the browser will not be able to identify that it is an HTML document and HTML 5 tags do not function properly.`}\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>Required attribute</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            {`The required attribute in HTML is a boolean attribute that can be applied to form elements (such as <input>, <select>, and <textarea>) to indicate that the user must fill out the field before submitting the form. If a required field is left empty when the form is submitted, the browser will prevent the form from being submitted and typically display an error message.`}\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                <form>\n                  <label for=\"name\">Name:</label>\n                  <input type=\"text\" id=\"name\" name=\"name\" required>\n\n                  <label for=\"email\">Email:</label>\n                  <input type=\"email\" id=\"email\" name=\"email\" required>\n\n                  <button type=\"submit\">Submit</button>\n                </form>\n              `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>Different formats in which colors</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            The color of an element can be defined in the following ways:\n            <ul>\n              <li>Built-In Color</li>\n              <li>RGB Format</li>\n              <li>RGBA Format</li>\n              <li>Hexadecimal Notation</li>\n              <li>HSL</li>\n              <li>HSLA</li>\n              <li>\n                Hue: Hue is the degree of the color wheel. Its value lies\n                between 0 to 360 where 0 represents red, 120 represents green\n                and 240 represents blue color.\n              </li>\n              <li>\n                Saturation: It takes a percentage value, where 100% represents\n                completely saturated, while 0% represents completely unsaturated\n                (gray).\n              </li>\n              <li>\n                Lightness: It takes a percentage value, where 100% represents\n                white, while 0% represents black.\n              </li>\n            </ul>\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>Block vs Inline elements</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            Every element in HTML has a default display value which depends upon\n            the element type. Block or inline is the default display value for\n            most of the elements.\n            <br />\n            <strong>Block-Level Elements:</strong>A block-level element always\n            starts on a new line and stretches out to the left and right as far\n            as it can.\n            <ul>\n              <li>\n                div element: The div element is used as a container for other\n                HTML elements. It has no required attributes. Style, class, and\n                id are the commonly used attributes.\n              </li>\n            </ul>\n            <strong>Inline Elements:</strong> An inline element does not start\n            on a new line and only takes up as much width as necessary.\n            <ul>\n              <li>\n                span element: The span element is used as a container for text.\n                It has no required attributes. Style, class, and id are the\n                commonly used attributes. It is typically used to apply styles\n                or scripts to a small portion of text within a larger block of\n                content.\n              </li>\n            </ul>\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>Insert a comment</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>{`We can insert a comment in HTML by beginning with a lesser than sign and ending with a greater than sign. For example, “<!-“ and “->.”`}</Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>Copyright symbol</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>{`To insert a copyright symbol in HTML, you can use the HTML entity &copy or the numeric code &#169;`}</Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>White space</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            An empty sequence of space characters is called white space in HTML.\n            It is considered a single-space character.\n            <br />\n            White space helps the browser merge multiple spaces into one space,\n            making indentation easier. It also helps better organize the content\n            and tags, making them readable and easily understood.\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>Add JavaScript to an HTML</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            JavaScript is used to make HTML web pages more interactive and\n            user-friendly. It is a scripting language that allows you to\n            interact with some aspects of the page based on user input. As with\n            CSS, there are three significant ways of including JavaScript:\n            <br />\n            <strong>Inline:</strong>\n            <br />\n            You can add JavaScript to your HTML elements directly whenever a\n            certain event occurs. We can add the JavaScript code using\n            attributes of the HTML tags that support it. Here is an example that\n            shows an alert with a message when the user clicks on it:\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                <button onclick=\"alert('Click the Button!');\">\n                  Click!\n                </button>\n              `}\n            />\n            <strong>Script block:</strong>\n            <br />\n            You can define a script block anywhere on the HTML code, which will\n            get executed as soon as the browser reaches that part of the\n            document. This is why script blocks are usually added at the bottom\n            of HTML documents.\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                <html>\n                  <script>\n                    var x = 1;\n                    var y = 2;\n                    var result = x + y;\n                    alert(\"X + Y is equal to \" + result);\n                  </script>\n                </html>\n              `}\n            />\n            <strong>External JavaScript file:</strong>\n            <br />\n            You can also import the JavaScript code from a separate file and\n            keep your HTML code clutter-free. This is especially useful if a\n            large amount of scripting is added to an HTML webpage.\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                <html>\n                  <script src=\"my-script.js\"></script>\n                </html>\n                `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>“display: none” vs “visibility: hidden” </Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            <strong>display: none</strong>\n            <ul>\n              <li>\n                Effect: The element is completely removed from the document\n                flow, as if it doesn’t exist. It doesn’t occupy any space on the\n                page.\n              </li>\n              <li>\n                Interactivity: The element is not interactive; users can’t\n                interact with it, and it won’t be accessible to screen readers.\n              </li>\n              <li>\n                Layout: Other elements will act as though the hidden element\n                isn’t there, meaning they will take up the space that would have\n                been occupied by the hidden element.\n              </li>\n            </ul>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                .hidden {\n                  display: none;\n                }\n\n                //html\n                <p>This paragraph is visible.</p>\n                <p class=\"hidden\">This paragraph will not be visible or occupy any space.</p>\n                <p>This paragraph will move up to take the hidden paragraph's place.</p>\n              `}\n            />\n            <strong>visibility: hidden</strong>\n            <ul>\n              <li>\n                Effect: The element is still present in the document and\n                occupies its space, but it’s not visible to the user.\n              </li>\n              <li>\n                Interactivity: The element is not interactive, but it still\n                occupies space in the layout. It’s still in the DOM, so screen\n                readers may still be able to access it.\n              </li>\n              <li>\n                Layout: The hidden element still takes up space on the page, but\n                it is invisible.\n              </li>\n            </ul>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                //css\n                .invisible {\n                  visibility: hidden;\n                }\n\n\n                //html\n                <p>This paragraph is visible.</p>\n                <p class=\"invisible\">This paragraph will not be visible but still occupies space.</p>\n                <p>This paragraph will not move up; it stays below the hidden one.</p>\n              `}\n            />\n            <strong>When to Use:</strong>\n            <ul>\n              <li>\n                Use display: none when you want to completely remove the element\n                from the layout and flow of the document.\n              </li>\n              <li>\n                Use visibility: hidden when you want to hide the element but\n                keep its space reserved in the layout.\n              </li>\n            </ul>\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>{`<link> vs  <a> tag`}</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            <strong>{`<link> Tag`}</strong>\n            <ul>\n              <li>\n                {`Purpose: The <link> tag is used to define relationships between the current document and external resources, most commonly for linking to stylesheets or other external files.`}\n              </li>\n              <li>\n                Functionality: It doesn’t create clickable links for users.\n                Instead, it’s used for linking resources like CSS, icons, or\n                prefetching resources.\n              </li>\n              <li>{`Placement: It is usually placed within the <head> of the HTML document.`}</li>\n            </ul>\n            Common Use Case: Linking a stylesheet\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                  <head>\n                    <link rel=\"stylesheet\" href=\"styles.css\">\n                  </head>\n\n                  <link rel=\"icon\" href=\"favicon.ico\">\n                  <link rel=\"preload\" href=\"image.jpg\">\n                `}\n            />\n            <strong>{`<a> Tag (Anchor Tag)`}</strong>\n            <ul>\n              <li>\n                {`Purpose: The <a> tag (anchor tag) is used to create clickable hyperlinks that navigate users to another page, section of the same page, or resource. It's designed for user interaction.`}\n              </li>\n              <li>\n                Functionality: When clicked, it can direct users to another\n                webpage, file, or section within the same document (via anchor\n                links).\n              </li>\n              <li>\n                Placement: It is placed within the body of the HTML document.\n              </li>\n            </ul>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                  <a href=\"https://www.example.com\">Visit Example</a>\n                `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>508 Compliance</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            508 compliance ensures that digital content, like websites and\n            documents, is accessible to people with disabilities. It includes:\n            <ul>\n              <li>\n                <strong>Text Alternatives:</strong>Use text for images so screen\n                readers can read them.\n              </li>\n              <li>\n                <strong>Keyboard Access:</strong>Make sure all features work\n                with a keyboard.\n              </li>\n              <li>\n                <strong>High Contrast:</strong>Use colors that are easy to read.\n              </li>\n              <li>\n                <strong>Screen Reader-Friendly:</strong>Organize content with\n                clear headings and labels.\n              </li>\n              <li>\n                <strong>Captions for Media:</strong>Add captions to videos and\n                audio.\n              </li>\n            </ul>\n            This makes digital content usable for everyone, improving\n            accessibility and overall user experience.\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography></Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography></Typography>\n        </AccordionDetails>\n      </Accordion>\n    </Container>\n  );\n};\n\nexport default HtmlList;\n","import React, { useState } from \"react\";\nimport {\n  Container,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails,\n  Typography,\n} from \"@mui/material\";\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\n// import Fade from \"@mui/material/Fade\";\nimport CodeSnippet from \"../CodeSnippet\";\n\nconst JavaScriptList = () => {\n  const [expanded, setExpanded] = useState(false);\n\n  const handleExpansion = () => {\n    setExpanded((prevExpanded) => !prevExpanded);\n  };\n\n  return (\n    <Container>\n      <Accordion expanded={expanded} onChange={handleExpansion}>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel1-content\"\n          id=\"panel1-header\"\n        >\n          <Typography>const</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            Variables declared with const are block-scoped and cannot be\n            reassigned once initialized. However, the value they hold can still\n            be mutable if it's an object or an array.\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel2-header\"\n        >\n          <Typography>Let</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            Variables declared with let are also block-scoped, but they can be\n            reassigned. They are usually preferred over var due to their block\n            scope.\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel3-header\"\n        >\n          <Typography>Var</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            Variables declared with var are function-scoped or globally scoped,\n            but not block-scoped. They can be reassigned and hoisted (moved to\n            the top of their function or global scope).\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel4-header\"\n        >\n          <Typography>== vs ===</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            <strong>==</strong> (Equality Operator):\n            <br />\n            <CodeSnippet\n              language=\"javascript\"\n              code={`console.log(5 == '5'); // Output: true.`}\n            />\n            - performs type coercion <br />\n            <strong> ===</strong> (Strict Equality Operator): <br />\n            <CodeSnippet\n              language=\"javascript\"\n              code={`console.log(5 === '5'); // Output: false `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel5-header\"\n        >\n          <Typography>Primitive data type</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            <ul>\n              <li>Number</li>\n              <li>boolean</li>\n              <li>string</li>\n              <li>undefined</li>\n              <li>null </li>\n              <li>symbol Eg: const key = Symbol('unique');</li>\n            </ul>\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel6-header\"\n        >\n          <Typography>Pass By Value vs Pass By Reference</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            <strong>Pass by Value:</strong>\n            <ul>\n              <li>\n                In pass by value, a copy of the actual value of the argument is\n                passed to the function.\n              </li>\n              <li>\n                Changes made to the parameter inside the function do not affect\n                the original value outside the function.{\" \"}\n              </li>\n            </ul>\n            <br />\n            <strong>Example 1:</strong>\n            <br />\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n              function increment(num) {\n                num += 1;\n                console.log(\"Inside function:\", num); // Output: Inside function: 6\n              }\n\n              let x = 5;\n              increment(x);\n              console.log(\"Outside function:\", x); // Output: Outside function: 5\n              `}\n            />\n            <br />\n            <strong>Example 2:</strong>\n            <br />\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                let test = 3;\n                let test2 = test;\n                test2++;\n                console.log(test, \" - \", test2); // 3 - 4\n              `}\n            />\n            <br />\n            <br />\n            <strong>Pass by Reference:</strong>\n            <ul>\n              <li>\n                In pass by reference, a reference to the original value of the\n                argument is passed to the function.\n              </li>\n              <li>\n                If the function modifies the parameter, it also modifies the\n                original value outside the function.\n              </li>\n              <li>\n                Objects (including arrays and functions) in JavaScript are\n                passed by reference.\n              </li>\n            </ul>\n            <strong>Example 1:</strong>\n            <br />\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n              function addElement(arr) {\n                arr.push(4);\n                console.log(\"Inside function:\", arr); // Output: Inside function: [1, 2, 3, 4]\n                }\n\n              let myArray = [1, 2, 3];\n              addElement(myArray);\n              console.log(\"Outside function:\", myArray); // Output: Outside function: [1, 2, 3, 4]\n              `}\n            />\n            <strong>Example 2:</strong>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                let test3 = { test: 'ert' };\n                let test4 = { ...test3 }; // Using the spread operator to create a shallow copy\n                test4.firstName = \"sumi\";\n                console.log(\"test3\", test3); // \"test3\", { test: \"ert\" }\n                console.log(\"test4\", test4); // \"test4\", { firstName: \"sumi\", test: \"ert\" }\n                 `}\n            />\n            <ul>\n              <li>\n                {`let test4 = {...test3}; creates a shallow copy of test3 and\n                assigns it to test4. Now, test3 and test4 reference different\n                objects.`}\n              </li>\n              <li>\n                Adding test4.firstName = \"sumi\"; only modifies test4, leaving\n                test3 unchanged.\n              </li>\n              <li>\n                {`As a result, test3 remains { test: \"ert\" }, while test4 becomes { test: \"ert\", firstName: \"sumi\" }.`}\n              </li>\n            </ul>\n\n            <br />\n            <strong>Example 3:</strong>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                let obj1 = {};\n                let obj2 = obj1; // Direct assignment, both variables point to the same object\n                obj2.firstName = \"sumi\";\n                console.log(\"obj1\", obj1); // { firstName: \"sumi\" }\n                console.log(\"obj2\", obj2); // { firstName: \"sumi\" }\n                `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel7-header\"\n        >\n          <Typography>\n            map() vs filter() vs reduce() and Flatting Array\n          </Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            <strong>Map()</strong>\n            <br />\n            <ul>\n              <li>\n                The map() method creates a new array by applying a function to\n                each element of the original array. It does not modify the\n                original array.\n              </li>\n              <li>\n                It iterates over each element of the array, applies a callback\n                function to each element, and returns a new array containing the\n                results.\n              </li>\n              <li>\n                The callback function receives three arguments: the current\n                element, the index of the current element, and the array being\n                traversed.\n              </li>\n            </ul>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                const numbers = [1, 2, 3, 4, 5];\n                const doubled = numbers.map(num => num * 2);\n                console.log(doubled); //\t\t[2, 4, 6, 8, 10];\n                console.log(numbers); //\t\t[1, 2, 3, 4, 5]\n                `}\n            />\n            <br />\n            <strong>Filter():</strong>\n            <ul>\n              <li>\n                The filter() method creates a new array containing only the\n                elements that pass a test specified by a callback function. It\n                does not modify the original array.\n              </li>\n              <li>\n                It iterates over each element of the array, applies a callback\n                function to each element, and returns a new array containing\n                only the elements for which the callback function returns true.\n              </li>\n              <li>\n                The callback function receives the same arguments as the map()\n                method.\n              </li>\n            </ul>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                const numbers = [1, 2, 3, 4, 5];\n                const evens = numbers.filter(num => num % 2 === 0);\n                console.log(evens); //[ 2, 4 ]\n                `}\n            />\n            <br />\n            <strong>Reduce():</strong>\n            <br />\n            {`reduce(callbackFn, initialValue)`}\n            <ul>\n              <li>\n                The reduce() method executes a reducer function (a callback\n                function) on each element of the array, resulting in a single\n                output value. It does not modify the original array.\n              </li>\n              <li>\n                It takes an initial value as an optional parameter and executes\n                the reducer function for each element of the array from left to\n                right, updating the accumulator value.\n              </li>\n              <li>\n                The reducer function receives four arguments: the accumulator\n                (which accumulates the callback's return values), the current\n                element, the current index, and the array being traversed.\n              </li>\n            </ul>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                const numbers = [1, 2, 3, 4, 5];\n                const sum = numbers.reduce((acc, num) => acc + num, 0);\n                console.log(sum); // Output: 15 (1 + 2 + 3 + 4 + 5);\n                `}\n            />\n            <ul>\n              <li>\n                map() transforms each element of an array and returns a new\n                array.\n              </li>\n              <li>\n                filter() selects elements from an array based on a condition and\n                returns a new array.\n              </li>\n              <li>\n                reduce() applies a function to each element of an array,\n                accumulating a single result.\n              </li>\n            </ul>\n            <strong>Flattening an Array of Arrays</strong>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n              const nestedArray = [[1, 2], [3, 4], [5, 6]];\n              const flatArray = nestedArray.reduce((accumulator, currentValue) => {\n                return accumulator.concat(currentValue);\n              }, []);\n\n              console.log(flatArray); // Output: [1, 2, 3, 4, 5, 6]\n            `}\n            />\n            <strong>Counting Occurrences of Items in an Array</strong>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                const fruits = ['apple', 'banana', 'orange', 'apple', 'orange', 'banana', 'banana'];\n\n                const fruitCount = fruits.reduce((accumulator, currentValue) => {\n                  if (accumulator[currentValue]) {\n                    accumulator[currentValue]++;\n                  } else {\n                    accumulator[currentValue] = 1;\n                  }\n                  return accumulator;\n                }, {});\n\n                console.log(fruitCount); // Output: { apple: 2, banana: 3, orange: 2 }\n              `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"\"\n        >\n          <Typography>Flat map</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            flatMap is a method in JavaScript that combines the operations of\n            map and flat. It first maps each element of an array to a new value,\n            and then flattens the result by one level. This method is\n            particularly useful when you need to perform a transformation on\n            each element of an array that results in arrays, and you want a\n            single, flat array as the result.\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                const numbers = [1, 2, 3];\n                const evens = numbers.map((x) =>  [x, x * 2])\n                let flat = numbers.flatMap(x => [x, x * 2])\n                console.log(evens);  //[ [ 1, 2 ], [ 2, 4 ], [ 3, 6 ] ]\n                console.log(flat); //[ 1, 2, 2, 4, 3, 6 ]\n              `}\n            />\n            <strong>Removing Empty Elements</strong>\n            <br />\n            Another common use case is filtering out unwanted elements (e.g.,\n            empty arrays) and flattening the result:\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n              const arr = [\"apple\", \"\", \"banana\", \"orange\"];\n\n              const result = arr.flatMap(str => str ? [str] : []);\n\n              console.log(result); // Output: [\"apple\", \"banana\", \"orange\"]\n              `}\n            />\n            <strong>Splitting and Flattening</strong>\n            <br />\n            You can use flatMap to split strings and flatten the result:\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n              const sentences = [\"Hello world\", \"FlatMap is useful\", \"JavaScript\"];\n\n              const words = sentences.flatMap(sentence => sentence.split(\" \"));\n\n              console.log(words); // Output: [\"Hello\", \"world\", \"FlatMap\", \"is\", \"useful\", \"JavaScript\"]\n\n              `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel8-header\"\n        >\n          <Typography>Push() </Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            Adds one or more elements to the end of an array and returns the new\n            length of the array.\n            <br />\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                let arr = [1, 2, 3];\n                arr.push(4); // arr is now [1, 2, 3, 4]\n                `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel9-header\"\n        >\n          <Typography>Pop()</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            Removes the last element from an array and returns that element.\n            <br />\n            It does not take any arguments.\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                let arr = [1, 2, 3];\n                arr.pop(); // arr is now [1, 2], returns 3\n                `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel10-header\"\n        >\n          <Typography>Shift()</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            Removes the first element from an array and returns that element.{\" \"}\n            <br />\n            This method does not take any arguments.\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                let arr = [1, 2, 3];\n                arr.shift(); // arr is now [2, 3], returns 1\n                `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel11-header\"\n        >\n          <Typography>Unshift()</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            Adds one or more elements to the beginning of an array and returns\n            the new length of the array.\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                let arr = [1, 2, 3];\n                arr.unshift(0); // arr is now [0, 1, 2, 3]\n                arr.unshift(11, 22); //Output: [11, 22, 0, 1, 2, 3]\n\n                console.log(arr) //[ 11, 22, 0, 1, 2, 3 ]\n                `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel12-header\"\n        >\n          <Typography>Splice()</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            Adds, removes, or replaces elements in an array at a specified\n            index.\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                //array.splice(start, deleteCount, item1, item2, ..., itemN);\n\n                const numbers = [1, 2, 3, 14, 5];\n                const sliced = numbers.splice(1);\n                console.log(sliced); // Output: [ 2, 3, 14, 5 ]\n\n                const numbers = [1, 2, 3, 14, 5];\n                const sliced = numbers.splice(3);\n                console.log(sliced); // Output: [ 14, 5 ]\n\n                let arr = [1, 2, 3, 4];\n                arr.splice(1, 2, 'a', 'b'); // arr is now [1, 'a', 'b', 4]\n                // Removes 2 elements starting at index 1, and adds 'a' and 'b'\n\n                const fruits = ['apple', 'banana', 'grape'];\n                fruits.splice(2, 0, 'orange', 'kiwi');\n                console.log(fruits); // Output: ['apple', 'banana', 'orange', 'kiwi', 'grape']\n\n                Removing Elements:\n                let arr = [1, 2, 3, 4, 5];\n                let removed = arr.splice(2, 2);\n                console.log(arr); // Output: [1, 2, 5]\n                console.log(removed); // Output: [3, 4]\n\n                Adding Elements:\n                let arr = [1, 2, 3, 4, 5];\n                arr.splice(2, 0, 'a', 'b');\n                console.log(arr); // Output: [1, 2, 'a', 'b', 3, 4, 5]\n\n                Replacing Elements:\n                let arr = [1, 2, 3, 4, 5];\n                arr.splice(2, 2, 'a', 'b');\n                console.log(arr); // Output: [1, 2, 'a', 'b', 5]\n              `}\n            />\n            <strong>.toSpliced()</strong>\n            <br />\n            To create a new array with the specified changes (adding, removing,\n            or replacing elements) without modifying the original array. This is\n            useful for immutable operations.\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n              //array.toSpliced(start, deleteCount, item1, item2, ..., itemN);\n\n              let fruits = ['apple', 'banana', 'orange'];\n              let newFruits = fruits.toSpliced(1, 1);\n              console.log(fruits); // Output: ['apple', 'banana', 'orange']\n              console.log(newFruits); // Output: ['apple', 'orange']\n\n              let fruits = ['apple', 'orange'];\n              let newFruits = fruits.toSpliced(1, 0, 'banana');\n              console.log(fruits); // Output: ['apple', 'orange']\n              console.log(newFruits); // Output: ['apple', 'banana', 'orange']\n              `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"\"\n        >\n          <Typography>Split()</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            The split() method of String values takes a pattern and divides this\n            string into an ordered list of substrings by searching for the\n            pattern, puts these substrings into an array, and returns the array.{\" \"}\n            <br />\n            To split a string into an array of substrings based on a specified\n            separator.\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                //string.split(separator, limit);\n\n                const text = 'apple,banana,orange';\n                const result = text.split(',');\n                console.log(result); // Output: ['apple', 'banana', 'orange']\n\n                const text = 'apple banana orange';\n                const result = text.split(' ', 2); // Limits to 2 substrings\n                console.log(result); // Output: ['apple', 'banana']\n\n              `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"\"\n        >\n          <Typography>Slice()</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            To create a shallow copy of a portion of an array or string into a\n            new array or string.\n            <br />\n            <strong>Array Slicing:</strong>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                //array.slice(begin, end);\n\n\n                const numbers = [1, 2, 3, 4, 5];\n                const sliced = numbers.slice(1, 4); // Slices from index 1 to 3\n                console.log(sliced); // Output: [2, 3, 4]\n              `}\n            />\n            <strong>String Slicing:</strong> <br />\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                //array.slice(begin, end);\n\n\n                const text = 'hello world';\n                const sliced = text.slice(0, 5); // Slices from index 0 to 4\n                console.log(sliced); // Output: 'hello'\n\n                const months = ['March', 'Jan', 'Feb', 'Dec'];\n                months.sort();\n                console.log(months);\n                // Expected output: Array [\"Dec\", \"Feb\", \"Jan\", \"March\"]\n\n                const array1 = [1, 30, 4, 21, 100000];\n                array1.sort();\n                console.log(array1);\n                // Expected output: Array [1, 100000, 21, 30, 4]\n              `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"\"\n        >\n          <Typography>splice() vs slice()</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            <ul>\n              <li>\n                Use splice() when you need to modify the original array by\n                adding, removing, or replacing elements.\n              </li>\n              <li>\n                Use slice() when you need to create a new array that is a\n                portion or copy of the original array without modifying it.\n              </li>\n            </ul>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                const fruits = ['Apple', 'Banana', 'Mango', 'Orange'];\n                let test = fruits.splice(2, 4);\n                console.log(test) //[ 'Mango', 'Orange' ]\n                console.log(fruits); //[ 'Apple', 'Banana' ]\n\n                let fruits2 = ['Apple', 'Banana', 'Mango', 'Orange'];\n                let citrus = fruits2.slice(2, 4);\n                console.log(citrus); // Output: ['Mango', 'Orange']\n                console.log(fruits2); // Output: ['Apple', 'Banana', 'Mango', 'Orange']\n              `}\n            />\n            <strong>Comparison Summary</strong>\n            <br />\n            <strong> Modification:</strong>\n            <br />\n            splice(): Modifies the original array.\n            <br />\n            slice(): Does not modify the original array; returns a new array.\n            <br />\n            <strong>Return Value:</strong>\n            <br />\n            splice(): Returns an array of removed elements.\n            <br />\n            slice(): Returns a new array containing the extracted elements.\n            <br />\n            <strong> Use Cases:</strong>\n            <br />\n            splice(): Used for adding, removing, or replacing elements in an\n            array.\n            <br />\n            slice(): Used for copying or extracting a portion of an array.\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel13-header\"\n        >\n          <Typography>Sort()</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            Sorts the elements of an array in place and returns the sorted\n            array.\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                let arr = [3, 1, 4, 2];\n                arr.sort(); // arr is now [1, 2, 3, 4]\n              `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel14-header\"\n        >\n          <Typography>Reverse()</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            Reverses the order of the elements in an array.\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                let arr = [1, 2, 3];\n                arr.reverse(); // arr is now [3, 2, 1]\n              `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel15-header\"\n        >\n          <Typography>Fill()</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            Fills all the elements of an array from a start index to an end\n            index with a static value.\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                //array.fill(value, start, end);\n\n                let arr = [1, 2, 3];\n                arr.fill(0); // arr is now [0, 0, 0]\n\n                let numbers = [1, 2, 3, 4, 5];\n                numbers.fill(0, 1, 4);\n                console.log(numbers); // Output: [1, 0, 0, 0, 5]\n\n                let emptyArray = new Array(5).fill(1);\n                console.log(emptyArray); // Output: [1, 1, 1, 1, 1]\n              `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel16-header\"\n        >\n          <Typography>CopyWithin()</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            Shallow copies part of an array to another location in the same\n            array and returns it, without modifying its length.\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                let arr = [1, 2, 3, 4, 5];\n                arr.copyWithin(0, 3); // arr is now [4, 5, 3, 4, 5]\n                // Copies elements from index 3 to the start\n\n                let arr = [1, 2, 3, 4, 5, 6, 7, 8];\n                arr.copyWithin(0, 3); //[ 4, 5, 6, 7,8, 6, 7, 8 ]\n              `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel17-header\"\n        >\n          <Typography>Falsey value</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            Unique to JavaScript, except 6 all are truthy value Some values when\n            you evaluate them as Booleans it will be falsey\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n              const t1 = undefined\n              const t2 = null\n              const t3 = NaN\n              const t4 = ''\n              const t5 = 0\n              const t6 = false\n              console.log(\"t1\",Boolean(t1)); //false\n              console.log(\"t2\",!!(t2));//false\n              console.log(\"t3\",!!(t3));//false\n              console.log(\"t4\",Boolean(t4));//false\n              console.log(\"t5\",Boolean(t5));//false\n              console.log(\"t6\",Boolean(t6));//false\n              console.log(\"t7\",Boolean(-0));//false\n\n              let username = \"\";\n              let displayName = username || \"Guest\";\n              console.log(displayName); // Output: \"Guest\"\n              `}\n            />\n            In this example, because username is an empty string (falsy),\n            displayName is assigned the value \"Guest\".\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel18-header\"\n        >\n          <Typography>Global Variables</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            Global variables are variables declared outside of any function or\n            block scope. These variables have global scope, meaning they are\n            accessible from anywhere in your code, including inside functions\n            and blocks. Global variables are generally declared without using\n            the var, let, or const keywords.\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel19-header\"\n        >\n          <Typography>This</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            The this keyword refers to the context within which a function is\n            executed.\n            <br />\n            <strong>Global Context:</strong>\n            <br />\n            When this is used in the global scope (outside of any function), it\n            refers to the global object. In a browser environment, the global\n            object is window. Ex: console.log(this === window) //true\n            <br />\n            <strong>Function Context:</strong>\n            <br /> When this is used inside a function, its value depends on how\n            the function is called:\n            <br />\n            <strong>Function Invocation:</strong>\n            <br /> If a function is called as a standalone function, this refers\n            to the global object (window in a browser) in non-strict mode, and\n            undefined in strict mode.\n            <br />\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n              function foo() {\n                console.log(this === window);\n              }\n\n              foo(); // Output: true\n\n              function foo() {\n                \"use strict\";\n                console.log(this == undefined);\n              }\n              foo(); // Output: true\n              `}\n            />\n            <strong>Method Invocation:</strong>\n            <br />\n            If a function is called as a method of an object, this refers to the\n            object that owns the method.\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n              const obj = {\n                name: 'John',\n                greet: function() {\n                  console.log('Hello, ' + this.name);\n                }\n              };\n              obj.greet(); // Output: Hello, John\n              `}\n            />\n            <strong>Constructor Context</strong>\n            <br />\n            When a function is used as a constructor (with the new keyword),\n            this refers to the new object being created.\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n              function Person(name) {\n                this.name = name;\n              }\n\n              const person = new Person('Bob');\n              console.log(person.name); // Logs \"Bob\"\n              `}\n            />\n            <strong>call, apply, and bind Methods</strong>\n            <br />\n            <ul>\n              <li>\n                <strong>call</strong> <br />\n                call: Invokes the function with a given this value and\n                arguments.\n                <CodeSnippet\n                  language=\"javascript\"\n                  code={`\n                  function showName() {\n                    console.log(this.name);\n                  }\n\n                  const person = { name: 'Charlie' };\n                  showName.call(person); // Logs \"Charlie\"\n              `}\n                />\n              </li>\n              <li>\n                <strong>apply</strong> <br />\n                apply: Similar to call, but arguments are provided as an array.\n                <CodeSnippet\n                  language=\"javascript\"\n                  code={`\n                  function showName(greeting) {\n                    console.log(greeting + ' ' + this.name);\n                  }\n\n                  const person = { name: 'David' };\n                  showName.apply(person, ['Hello']); // Logs \"Hello David\"\n              `}\n                />\n              </li>\n              <li>\n                <strong>bind</strong> <br />\n                bind: Returns a new function with a bound this value.\n                <CodeSnippet\n                  language=\"javascript\"\n                  code={`\n                  function showName() {\n                    console.log(this.name);\n                  }\n\n                  const person = { name: 'Eve' };\n                  const boundShowName = showName.bind(person);\n                  boundShowName(); // Logs \"Eve\"\n                  `}\n                />\n              </li>\n            </ul>\n            <strong>Arrow Functions:</strong>\n            <br />\n            In arrow functions, this retains the value of the enclosing lexical\n            context (the value of this from the surrounding code). Arrow\n            functions do not have their own this binding.\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n              const person = {\n                name: 'Frank',\n                greet: function() {\n                  const innerFunction = () => {\n                    console.log(this.name);\n                  };\n                  innerFunction();\n                }\n              };\n\n              person.greet(); // Logs \"Frank\"\n            `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel20-header\"\n        >\n          <Typography>Coercion</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            In JavaScript refers to the automatic conversion of values from one\n            data type to another.\n            <br />\n            <strong>Implicit Coercion:</strong>\n            <ul>\n              <li>\n                Implicit coercion occurs when JavaScript automatically converts\n                one data type to another during an operation, such as\n                comparisons or arithmetic operations.\n              </li>\n            </ul>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                Console.log(“5”+ 5) //55\n                `}\n            />\n            <br />\n            <strong>Explicit Coercion:</strong>\n            <ul>\n              <li>\n                Explicit coercion occurs when a developer intentionally converts\n                a value from one data type to another using functions or\n                operators specifically designed for type conversion.\n              </li>\n            </ul>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n              // Converting string to number\n              let str = \"10\";\n              let num = parseInt(str);\n              console.log(num); // Output: 10\n              // Converting number to string\n              let value = 10;\n              let stringValue = String(value);\n              console.log(stringValue); // Output: \"10\"\n            `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel21-header\"\n        >\n          <Typography>TypeOf</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            The typeof operator is used to determine the data type of a value.\n            It returns a string indicating the type of the operand.\n            <br />\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n              typeof 42; // \"number\"\n              typeof \"hello\"; // \"string\"\n              typeof true; // \"boolean\"\n              typeof undefined; // \"undefined\"\n              typeof null; // \"object\"\n              typeof { key: \"value\" }; // \"object\"\n              typeof [1, 2, 3]; // \"object\"\n              `}\n            />\n            <br />\n            In JavaScript, arrays are a type of object. Therefore, when you use\n            typeof with an array, it returns 'object'.\n            <br />\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                typeof function() {}; // \"function\"\n                typeof Symbol(\"foo\"); // \"symbol\"\n              `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel22-header\"\n        >\n          <Typography>Delete</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            The delete operator is used to remove a property from an object. It\n            can also be used to delete an element from an array.\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n              const person = {\n              name: 'John',\n              age: 30,\n              city: 'New York'\n              };\n\n              delete person.age;\n              console.log(person); // Output: { name: 'John', city: 'New York' }\n              ======\n              const numbers = [1, 2, 3, 4, 5];\n              delete numbers[2];\n              console.log(numbers); // Output: [1, 2, <1 empty item>, 4, 5]\n              Or //\t\t[1, 2, undefined, 4, 5]\n                `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel23-header\"\n        >\n          <Typography>Object Notations</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            These notations provide different ways to define and initialize\n            objects Dot notation and bracket notation ( don t use this often)\n            <br />\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                const user = {\n                fn: \"test\",\n                ln: \"rt\",\n                age: 56\n                }\n                console.log(user.fn);//\"test\"\n                console.log(user['ln']);//\"rt\"\n                for( let property in user){\n                  console.log(user[property]);//\"test\" \"rt\" 56\n                }\n                `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel24-header\"\n        >\n          <Typography>Strict Mode</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            Strict Mode is a feature introduced in ECMAScript 5 (ES5) that\n            allows you to place a program, or a function, in a \"strict\"\n            operating context. This strict context helps detect common coding\n            mistakes and \"unsafe\" actions in JavaScript and throws more\n            exceptions. It also disables some features that are confusing or\n            poorly thought out in JavaScript.\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                function myFunction() {\n                  \"use strict\";\n                  // Strict mode enabled for this function\n                }\n                `}\n            />\n            <ul>\n              <li>It disallows the implicit creation of global variables.</li>\n              <li>\n                It disallows duplicate property names in objects and function\n                parameter names.\n              </li>\n              <li>\n                It makes this keyword behave differently, preventing it from\n                defaulting to the global object.\n              </li>\n              <li>It disallows deleting variables and functions. </li>\n              <li>It makes eval() safer by restricting its scope. </li>\n              <li>It disallows octal syntax. </li>\n              <li>\n                It throws errors on certain invalid code that silently fails in\n                non-strict mode.\n              </li>\n            </ul>\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel25-header\"\n        >\n          <Typography>Anonymous Function </Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            In JavaScript, an anonymous function is a function that is defined\n            without a name. Instead of being assigned to a variable or a\n            property of an object, it's defined directly where it's needed.\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                // Anonymous function expression\n                const add = function(a, b) {\n                return a + b;\n                };\n                // Using the anonymous function\n                console.log(add(2, 3)); // Output: 5\n                `}\n            />\n            Anonymous functions are commonly used as arguments to other\n            functions, such as in event handlers or array methods like map,\n            filter, and reduce.\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n              const numbers = [1, 2, 3, 4, 5];\n              // Using an anonymous function with map\n              const doubled = numbers.map(function(num) {\n              return num * 2;\n              });\n              console.log(doubled); // Output: [2, 4, 6, 8, 10]\n              `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel26-header\"\n        >\n          <Typography>Callbacks</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            A callback is a function that is passed as an argument to another\n            function and is executed after some operation has been completed or\n            at a specified time. Callbacks are commonly used in asynchronous\n            programming, event handling, and functional programming patterns.\n            <br />\n            <br />\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n              const firstFun= (num, callback) => {\n                console.log(\"item\", num);\n                callback();\n              };\n              const bye = () => {\n                console.log(\"bye\")\n              };\n              firstFun(5, bye); // “item”, 5             “bye”\n\n              //Mostly we use in map filter etc..\n                const num = [1, 2, 3, 5];\n                const num2 = num.map((item) => item + 1);  => this callback function\n                console.log(num2) //[2, 3, 4, 6]\n              `}\n            />\n            <strong>Other way</strong>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n              const call = (item) => {\n                return item + 1;\n              }\n              const num2 = num.map(call);\n            `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel27-header\"\n        >\n          <Typography>Closure</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            A closure is the combination of a function bundled together\n            (enclosed) with references to its surrounding state (the lexical\n            environment). In other words, a closure gives you access to an outer\n            function's scope from an inner function closures are created every\n            time a function is created, at function creation time.\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                function init() {\n                  var name = \"Mozilla\"; // name is a local variable created by init\n                  function displayName() {\n                    // displayName() is the inner function, that forms the closure\n                    console.log(name); // use variable declared in the parent function\n                  }\n                  displayName();\n                }\n                init(); //\"Mozilla\"\n            `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel28-header\"\n        >\n          <Typography>Naming & Standards</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            {`Have few variable as possible`}\n            <br />\n            {`Don’t use num , str etc`}\n            <br />\n            {`Don’t use all capital unless its a const variable`}\n            <br />\n            {`Avoid using single-letter variable names unless they are used as loop counters`}\n            <br />\n            {`Use camelCase for variable names (e.g., myVariable, firstName, totalAmount).`}\n            <br />\n            <ul>\n              <li>Use all uppercase letters for constant names. </li>\n              <li>\n                Separate words with underscores (e.g., MAX_SIZE, PI, API_KEY)\n              </li>\n            </ul>\n            {`Use descriptive names that indicate the action or behavior of the function.`}\n            <br />\n            {`Use lowercase letters for file names.`}\n            <br />\n            {`Use camelCase for module names.`}\n            <br />\n            {`Use PascalCase for class names. (e.g., Person, Car, Book).`}\n            <br />\n            {`Use PascalCase (also known as UpperCamelCase) for constructor names.`}\n            <br />\n            {`Use positive, descriptive names for boolean variables and functions.(e.g., isActive, hasPermission, canEdit).`}\n            <br />\n            {`Avoid using cryptic or unclear abbreviations.`}\n            <br />\n            {`Use descriptive comments to explain the purpose, behavior, or intent of code.`}\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel29-header\"\n        >\n          <Typography>For...of vs For...in</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            For...of when you need to iterate over values of an iterable like\n            arrays, strings, or other ordered collections, and use for...in when\n            you need to iterate over the properties of an object.\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n            const array = [1, 2, 3, 4, 5];\n            for (const value of array) {\n              console.log(value);\n            }\n\n            const obj = { a: 1, b: 2, c: 3 };\n            for (const key in obj) {\n              console.log(key, obj[key]);\n            }\n            `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel30-header\"\n        >\n          <Typography>Other method to iterate the object:</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            <strong>Object.keys() & forEach:</strong>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                let obj = {a: 1, b:2, c: 3}\n                Object.keys(obj).forEach(key => {\n                  console.log( key, obj[key]);\n                })       // a 1        b 2         c 3\n              `}\n            />\n            <strong>Object.values() & forEach:</strong>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                let obj = {a: 1, b:2, c: 3}\n                Object.values(obj).forEach(value => {\n                  console.log( value);\n                }) //1    2      3\n              `}\n            />\n            <strong>Object.entires() & forEach:</strong>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                let obj = {a: 1, b:2, c: 3}\n                Object.entries(obj).forEach(([key, value]) => {\n                  console.log( key, value);\n                }) // a 1        b 2         c 3\n             `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel31-header\"\n        >\n          <Typography>\n            For...of with Object.keys(), Object.values(), or Object.entries():\n          </Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            You can use the for...of loop in combination with Object.keys(),\n            Object.values(), or Object.entries() to iterate over properties.\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                const obj = { foo: \"bar\", baz: 42 };\n                for( let key of Object.keys(obj)){\n                  console.log(key, obj[key]) //foo bar   baz 42\n                }\n\n                for(let value of Object.values(obj)){\n                  console.log(value) //bar 42\n                }\n\n                for(let [key, value] of Object.entries(obj)){\n                  console.log(key, value) //foo bar   baz 42\n                }\n            `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel32-header\"\n        >\n          <Typography>Object.getOwnPropertyNames()</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            This method returns an array of all properties (including\n            non-enumerable properties except for those which use Symbol) found\n            directly upon a given object.\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n            const obj = { a: 1, b: 2, c: 3 };\n            console.log(Object.getOwnPropertyNames(obj));    //[ 'a', 'b', 'c' ]\n            Object.getOwnPropertyNames(obj).forEach(key => {\n              console.log(key, obj[key]);\n            }); //a 1     b 2      c 3\n            `}\n            />\n            <strong>New EXAMPLE with all</strong>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                const obj = {\n                  a: 1,\n                  b: 2,\n                };\n\n                Object.defineProperty(obj, 'c', {\n                  value: 3,\n                  enumerable: false\n                });\n\n                const symbolKey = Symbol('key');\n                obj[symbolKey] = 'value';\n                console.log(Object.keys(obj)) //[ 'a', 'b' ]\n                console.log(Object.getOwnPropertyNames(obj)); //[ 'a', 'b', 'c' ]\n                console.log(Object.getOwnPropertySymbols(obj));  //[ Symbol(key) ]\n                console.log(Reflect.ownKeys(obj)); //[ 'a', 'b', 'c', Symbol(key) ]\n\n                //eg:\n                const person = {};\n                Object.defineProperty(person, 'name', {\n                  value: 'Alice',\n                  enumerable: false\n                });\n                Object.defineProperty(person, 'age', {\n                  value: 30,\n                  enumerable: true\n                });\n\n                console.log(Object.keys(person)) //[ 'age' ]\n                const propertyNames = Object.getOwnPropertyNames(person);\n                console.log(propertyNames); // Output: [\"name\", \"age\"]\n            `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel33-header\"\n        >\n          <Typography>Empty Arrays</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n            let arr1 = [1, 2, 3, 4, 5]\n            let arr2 = [1, 2, 3, 4, 5]\n            let arr3 = [1, 2, 3, 4, 5]\n            let arr4 = [1, 2, 3, 4, 5]\n            let arr5 = [1, 2, 3, 4, 5]\n            arr1 = [];\n            arr2.splice(0);\n            arr3.length = 0;\n\n            while (arr4.length > 0) {\n              arr4.pop();\n            }\n\n            while (arr5.length > 0) {\n              arr5.shift();\n            }\n\n            console.log(arr1); //[]\n            console.log(arr2); //[]\n            console.log(arr3); //[]\n            console.log(arr4); //[]\n            console.log(arr5); //[]\n            `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel34-header\"\n        >\n          <Typography>MUL Function</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            To create a mul function in JavaScript to multiply numbers, you can\n            simply define a function that takes multiple arguments and\n            multiplies them together\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                const test = (a) => {\n                  return (b) => {\n                    return (c) => {\n                      return a * b * c\n                    }\n                  }\n                }\n                console.log(test(1)(2)(3)) //6\n\n                //Using Rest Parameters\n                const mul = (...args) => {\n                  if(args.length === 0){\n                    console.log(1)\n                  }\n\n                  let test = args.reduce((prd, currt) => {\n                    console.log('prd', prd, currt) //1 1  1 2   2 3   6 4\n                    return prd * currt\n                  }, 1)\n                  console.log(test) //24\n                }\n                mul(1, 2, 3, 4);\n                console.log(mul([3, 4, 2])); //24\n            `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel35-header\"\n        >\n          <Typography>Create Array</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            You can define an array using square brackets [] and populate it\n            with values separated by commas\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                const arr = [1,3,5];\n              `}\n            />\n            <strong>Creating an Array with the Array Constructor:</strong>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                Const badArr = new Array() =>. Don’t do this this is because Inconsistent Behavior:\n              `}\n            />\n            <strong>Creating an Array with the Array.of() Method (ES6):</strong>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                const arrayWithValues = Array.of(1, 2, 3, 4, 5);\n              `}\n            />\n            <strong>\n              Creating an Array with the Array.from() Method (ES6):\n            </strong>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                const arrayFromIterable = Array.from('hello');\n                // Creates an array from an iterable (e.g., string)\n                const arrayFromFunction = Array.from({ length: 5 }, (v, i) => i * 2); // v or _\n                // [0, 1, 2, 3, 4]\n            `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel36-header\"\n        >\n          <Typography>Sequence generator (range)</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            <strong>\n              <a\n                href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from#sequence_generator_range\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                Ref\n              </a>\n            </strong>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                const range = (start, stop, step) =>\n                Array.from({ length: (stop - start) / step + 1 }, (_, i) => start + i * step);\n              `}\n            />\n            <strong>Example</strong>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                // Generate numbers range 0..4\n                range(0, 4, 1);\n                // [0, 1, 2, 3, 4]\n\n                // Generate numbers range 1..10 with step of 2\n                range(1, 10, 2);\n                // [1, 3, 5, 7, 9]\n\n                //Basic Range Function\n                function range(start, end, step = 1) {\n                  const result = [];\n                  for (let i = start; i < end; i += step) {\n                    result.push(i);\n                  }\n                  return result;\n                }\n                // Example usage:\n                console.log(range(1, 5));    // Output: [1, 2, 3, 4]\n                console.log(range(2, 10, 2)); // Output: [2, 4, 6, 8]\n\n\n                //Range Function with Array.from()\n                function range(start, end, step = 1) {\n                  return Array.from({ length: Math.ceil((end - start) / step) }, (_, i) => start + i * step);\n                }\n                // Example usage:\n                console.log(range(1, 5));    // Output: [1, 2, 3, 4]\n                console.log(range(2, 10, 2)); // Output: [2, 4, 6, 8]\n              `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel37-header\"\n        >\n          <Typography>Undefined vs Null</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            <strong>undefined:</strong> <br />\n            <ul>\n              <li>\n                undefined represents the absence of a value or the value of a\n                variable that has not been assigned.\n              </li>\n              <li>\n                Variables that are declared but not initialized automatically\n                have the value undefined.\n                <li>\n                  Functions that do not return a value implicitly return\n                  undefined.\n                </li>\n                <li>\n                  It's also the default value of uninitialized properties in\n                  objects.\n                </li>\n              </li>\n            </ul>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                let variable; // variable is declared but not assigned, so its value is undefined\n                console.log(variable); // Output: undefined\n\n                function doSomething() {\n                  // This function does not return anything, so it implicitly returns undefined\n                }\n                const obj = {};\n                console.log(obj.property); // Output: undefined (property is not initialized)\n              `}\n            />\n            <strong>Null</strong> <br />\n            <ul>\n              <li>\n                null represents the intentional absence of any object value or\n                the value of a variable explicitly set to \"no value\".\n              </li>\n              <li>\n                It's often used as a placeholder or to indicate that a variable\n                is intentionally empty or has no value.\n              </li>\n              <li>\n                It's distinct from undefined, which is the default value for\n                uninitialized variables.\n              </li>\n            </ul>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n            let variable = null; // variable is intentionally set to null\n            console.log(variable); // Output: null\n            `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel38-header\"\n        >\n          <Typography>Number Issues</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            working with numbers can sometimes lead to unexpected behavior due\n            to the way numbers are represented and handled internally\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n              console.log(0.1 + 0.2 === 0.3); // Output: false\n              console.log(0.2+0.4) //0.6000000000000001\n              console.log((0.2+0.4).toFixed(1)) //\"0.6\"\n\n              console.log((0.1 + 0.2).toFixed(1) === 0.3); // Output: false\n              //beacuse console.log((0.1 + 0.2).toFixed(1)); // Output: \"0.3\" -> string not a number\n              console.log(parseFloat((0.1 + 0.2).toFixed(1)) === 0.3); //true\n              console.log(isNaN(\"wewt\")) //true\n\n              Number.isFinite(123);          // true (123 is a finite number)\n              Number.isFinite(Infinity);     // false (Infinity is not a finite number)\n              Number.isFinite(-Infinity);    // false (-Infinity is not a finite number)\n              Number.isFinite(NaN);          // false (NaN is not a finite number)\n              Number.isFinite('123');        // false ('123' is a string, not a number)\n              Number.isFinite(true);         // false (true is converted to 1, which is a finite number)\n              Number.isFinite(null);         // false (null is converted to 0, which is a finite number)\n              Number.isFinite(undefined);    // false (undefined is not a number)\n              `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel39-header\"\n        >\n          <Typography>Instanceof</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            Instanceof operator is used to check whether an object belongs to a\n            particular class or constructor function. It tests whether the\n            prototype property of a constructor function appears anywhere in the\n            prototype chain of an object\n            <br />\n            <br />\n            {`object instanceof constructor`}\n            <br />\n            <strong>object:</strong> The object to be tested. constructor: The\n            constructor function or class to test against.\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n              class Animal {}\n\n              class Dog extends Animal {}\n\n              const animal = new Animal();\n              const dog = new Dog();\n              console.log(dog instanceof Dog);     // true\n              console.log(dog instanceof Animal);  // true (Dog is a subclass of Animal)\n              console.log(animal instanceof Animal); // true\n              console.log(animal instanceof Dog); // false (Animal is not a subclass of Dog)\n\n              console.log('hello' instanceof String); // Output: false\n              `}\n            />\n            Primitive Values: instanceof does not work with primitive values\n            like strings, numbers, or booleans:\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel40-header\"\n        >\n          <Typography>IIFE</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            Immediately Invoke Function Expression JavaScript function that is\n            executed immediately after it is defined. It's often used to create\n            a new scope for variables and avoid polluting the global scope, as\n            well as to encapsulate code and create modules.\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n            ( function () {\n              //code here excuse immediately\n            })()\n\n            (() => {\n              // Code here runs immediately\n            })();\n\n            ( function () {\n              console.log(\"test\");\n            })(); //test\n\n            (function() {\n              console.log(\"test\");\n            }); //no output\n\n            const test = (function() {\n              const init = {\n                id: 90,\n                methods: {\n                  call() {\n                    console.log('Call method executed');\n                  }\n                }\n              };\n             return init;\n             })();\n\n            console.log(test);\n            `}\n            />\n            <strong>Output</strong>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                {\n                  id: 90,\n                  methods: {\n                    call: call() {\n                      console.log('Call method executed');\n                    }\n                  }\n                }\n              `}\n            />\n            <strong>Benefits of Using IIFEs</strong>\n            <ul>\n              <li>\n                Local Scope: Encapsulates variables and functions to avoid\n                conflicts with other code in the global scope.\n              </li>\n              <li>\n                Avoid Global Pollution: Helps in reducing the risk of variable\n                name collisions and pollution of the global namespace.\n              </li>\n              <li>\n                Data Privacy: Enables private data and functions that are not\n                accessible from outside the function.\n              </li>\n            </ul>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                const module = (function() {\n                  let privateVar = 'I am private';\n\n                  function privateFunction() {\n                    return 'This is a private function';\n                  }\n\n                  return {\n                    publicVar: 'I am public',\n                    publicFunction: function() {\n                      return 'This is a public function';\n                    }\n                  };\n                })();\n\n                console.log(module.publicVar);         // Output: 'I am public'\n                console.log(module.publicFunction());  // Output: 'This is a public function'\n                console.log(module.privateVar);        // Output: undefined (not accessible)\n                console.log(module.privateFunction);   // Output: undefined (not accessible)\n\n                //Basic Function with Private Variables\n                const result = (function() {\n                  let privateVar = 'I am private';\n\n                  function privateFunction() {\n                    return 'This is a private function';\n                  }\n\n                  return {\n                    publicVar: 'I am public',\n                    publicFunction: function() {\n                      return privateFunction();\n                    }\n                  };\n                })();\n\n                console.log(result.publicVar);         // Output: 'I am public'\n                console.log(result.publicFunction());  // Output: 'This is a private function'\n                console.log(result.publicFunction);  //[Function: publicFunction]\n                console.log(result.privateVar);        // Output: undefined (not accessible)\n                console.log(result.privateFunction);   // Output: undefined (not accessible)\n\n\n                // Accessing Private Variables Directly in Closure\n                onst counter = (function() {\n                  let count = 0;  // Private variable\n\n                  function increment() {\n                    count++;\n                    return count;\n                  }\n\n                  function getCount() {\n                    return count;\n                  }\n\n                  return function(action) {\n                    if (action === 'increment') {\n                      return increment();\n                    } else if (action === 'getCount') {\n                      return getCount();\n                    }\n                  };\n                })();\n\n                console.log(counter('increment')); // Output: 1\n                console.log(counter('increment')); // Output: 2\n                console.log(counter('getCount'));  // Output: 2\n\n                //Private Variables with Parameters\n                const person = (function(name, age) {\n                  // Private variables\n                  let _name = name;\n                  let _age = age;\n\n                  return {\n                    getName: function() {\n                      return _name;\n                    },\n                    getAge: function() {\n                      return _age;\n                    }\n                  };\n                })('Jane Doe', 25);\n\n                console.log(person.getName()); // Output: 'Jane Doe'\n                console.log(person.getAge());  // Output: 25\n\n              `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel41-header\"\n        >\n          <Typography>JSON.stringify() vs JSON.parse()</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            <strong>JSON (JavaScript Object Notation).</strong>\n            <br />\n            <strong>JSON.stringify():</strong>\n            <br />\n            <ul>\n              <li>\n                This function converts a JavaScript object into a JSON string.\n              </li>\n              <li>\n                It takes an object as an argument and returns its JSON\n                representation.\n              </li>\n              <li>\n                If the object contains nested objects or arrays, they are\n                recursively converted into JSON strings.\n              </li>\n            </ul>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n            const obj = { name: 'John', age: 30 };\n            const jsonString = JSON.stringify(obj);\n            console.log(jsonString); // Output: {\"name\":\"John\",\"age\":30}\n                `}\n            />\n            <strong>JSON.parse():</strong>\n            <ul>\n              <li>\n                This function parses a JSON string and converts it into a\n                JavaScript object.\n              </li>\n              <li>\n                It takes a JSON string as an argument and returns the\n                corresponding JavaScript object.{\" \"}\n              </li>\n            </ul>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n            const jsonString = '{\"name\":\"John\",\"age\":30}';\n            const obj = JSON.parse(jsonString);\n            console.log(obj); // Output: { name: 'John', age: 30 }\n            `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel42-header\"\n        >\n          <Typography>Maintaining State & Local Storage</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            <strong>Maintaining State:</strong> <br />\n            State refers to the current condition or data of your application at\n            any given moment. In JavaScript, you typically maintain state by\n            storing data in variables, objects, or data structures. <br />{\" \"}\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                let count = 0;\n                let user = {\n                  name: 'John Doe',\n                  age: 30,\n                  email: 'john@example.com'\n                };\n              `}\n            />\n            <strong> Local Storage:</strong> <br />\n            Local storage is a feature of web browsers that allows you to store\n            data persistently across browser sessions. You can use the\n            localStorage object in JavaScript to interact with local storage.{\" \"}\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                localStorage.setItem('username', 'john');\n                let username = localStorage.getItem('username');\n                localStorage.removeItem('username');\n                localStorage.clear();\n\n                const user = JSON.stringify({\n                  firsName: \"sum\",\n                  lastname: 'test'\n                })\n\n                localStorage.setItem(\"user\", user);\n                const firstName = JSON.parse(localStorage.getItem('user'));\n\n                console.log(firstName)\n                /*{firsName: \"sum\",\n                  lastname: \"test\"\n                } */\n              `}\n            />\n            <strong> Limitations:</strong>\n            <br />\n            Local storage has a size limit (usually around 5-10MB) and stores\n            data as strings, so you may need to serialize and deserialize\n            complex data structures when storing and retrieving them.\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"\"\n        >\n          <Typography> Local Storage vs Session Storage vs Cookies </Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            <strong> Local Storage</strong>\n            <ul>\n              <li>\n                Purpose: Stores data with no expiration time, meaning the data\n                persists even when the browser is closed and reopened.\n              </li>\n              <li>\n                Storage Capacity: Typically around 5-10 MB per origin (depending\n                on the browser).\n              </li>\n              <li>\n                Scope: Data is accessible only to the origin (protocol, domain,\n                and port) that stored it. It is not sent to the server with\n                every request.\n              </li>\n              <li>\n                Data Access: Data is available for the entire lifespan of the\n                origin's data.\n              </li>\n              <li>API: Accessed via the localStorage object in JavaScript.</li>\n            </ul>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                // Set an item\n                localStorage.setItem('key', 'value');\n\n                // Get an item\n                const value = localStorage.getItem('key');\n\n                // Remove an item\n                localStorage.removeItem('key');\n\n                // Clear all items\n                localStorage.clear();\n              `}\n            />\n            <strong>Session Storage</strong>\n            <ul>\n              <li>\n                Purpose: Stores data for the duration of the page session. Data\n                is only available while the page is open and is cleared when the\n                page session ends (e.g., when the tab or browser is closed).{\" \"}\n              </li>\n              <li>\n                Storage Capacity: Typically around 5-10 MB per origin (similar\n                to Local Storage).{\" \"}\n              </li>\n              <li>\n                Scope: Data is accessible only within the same tab or window.\n                Data is not shared across tabs or windows.{\" \"}\n              </li>\n              <li>\n                Data Access: Data persists only for the duration of the page\n                session.{\" \"}\n              </li>\n              <li>\n                API: Accessed via the sessionStorage object in JavaScript.\n              </li>\n            </ul>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                // Set an item\n                sessionStorage.setItem('key', 'value');\n\n                // Get an item\n                const value = sessionStorage.getItem('key');\n\n                // Remove an item\n                sessionStorage.removeItem('key');\n\n                // Clear all items\n                sessionStorage.clear();\n              `}\n            />\n            <strong>Cookies</strong>\n            <ul>\n              <li>\n                Purpose: Store small amounts of data that are sent to the server\n                with every HTTP request. Useful for server-side session\n                management and for tracking user preferences.\n              </li>\n              <li>Storage Capacity: Limited to around 4 KB per cookie.</li>\n              <li>\n                Scope: Data is sent to the server with every request to the\n                domain that set the cookie. Data is shared across all tabs and\n                windows for the same domain.\n              </li>\n              <li>\n                Data Access: Cookies can have an expiration time and are deleted\n                when they expire or are manually cleared.\n              </li>\n              <li>\n                API: Accessed via the document.cookie property in JavaScript.\n                Management of cookies is typically done through server-side or\n                client-side headers.\n              </li>\n            </ul>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                // Set a cookie\n                document.cookie = \"key=value; expires=Fri, 31 Dec 9999 23:59:59 GMT; path=/\";\n\n                // Get cookies\n                const cookies = document.cookie;\n\n                // Remove a cookie (by setting its expiration date to the past)\n                document.cookie = \"key=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/\";\n              `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel43-header\"\n        >\n          <Typography>HTML 5 APIs</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                if(navigator.geolocation) {\n                  navigator.geolocation.getCurrentPosition((pos) => {\n                    console.log(\"location\", pos)\n                    }, () => {\n                    console.log(\"nope\");\n                  });\n                  console.log(\"location ====\");\n                }\n            `}\n            />\n            <strong>Canvas API:</strong> Allows for dynamic rendering of\n            graphics, charts, and animations directly in the browser using\n            JavaScript.\n            <br />\n            <strong>Web Storage (localStorage and sessionStorage):</strong>{\" \"}\n            Provides a way to store data locally in the user's browser.\n            localStorage stores data persistently across sessions, while\n            sessionStorage stores data for the duration of a session.\n            <br />\n            <strong>IndexedDB:</strong> A client-side database system that\n            allows web applications to store large amounts of structured data\n            and perform complex queries.\n            <br />\n            <strong>Web Workers:</strong> Enables running JavaScript code in the\n            background to perform tasks without blocking the main execution\n            thread, improving performance and responsiveness.\n            <br />\n            <strong>WebSockets:</strong> Provides a full-duplex communication\n            channel over a single TCP connection, allowing for real-time\n            bidirectional communication between the client and server.\n            <br />\n            <strong>Geolocation API:</strong> Allows web applications to access\n            the user's geographical location information (with user consent),\n            enabling location-based services and functionalities.\n            <br />\n            <strong>File API:</strong> Enables web applications to interact with\n            files on the user's local system, including reading, writing, and\n            manipulating files.\n            <br />\n            <strong>Drag and Drop API:</strong> Allows users to drag and drop\n            elements on a web page, facilitating intuitive interaction with web\n            content.\n            <br />\n            <strong>History API:</strong> Enables manipulation of the browser's\n            session history, allowing for dynamic updates to the URL without\n            full page reloads and facilitating the implementation of single-page\n            applications (SPAs).\n            <br />\n            <strong>WebRTC (Real-Time Communication):</strong> Provides APIs for\n            real-time communication between web browsers, enabling peer-to-peer\n            audio, video, and data sharing without the need for plugins or\n            third-party software.\n            <br />\n            <strong>Media Capture and Streams API:</strong> Allows web\n            applications to access audio and video streams from the user's\n            device, enabling functionalities such as webcam access and\n            audio/video recording.\n            <br />\n            <strong>Notifications API:</strong> Allows web applications to\n            display system notifications to the user, providing timely updates\n            and alerts.\n            <br />\n            <strong>Service Workers:</strong> Provides a scriptable network\n            proxy in the web browser, allowing developers to control network\n            requests and cache resources for offline use, improving performance\n            and reliability.\n            <br />\n            <strong>Web Audio API:</strong> Enables advanced audio processing\n            and synthesis in web applications, allowing for the creation of\n            interactive audio experiences and games.\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel44-header\"\n        >\n          <Typography>Destructuring Objects</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            Destructuring in JavaScript allows you to extract data from arrays\n            and objects into distinct variables, making it easier to work with\n            complex data structures.\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                const arr = [10, 20, 2024]\n                console.log(arr); //[10, 20, 2024]\n\n                const [month, day, year] = [10, 20, 2024];\n                console.log($ {month}/$ {day}/$ {year}); //“10/20/2024\"\n\n                Using alias\n                let person ={\n                  firstName: \"test\"\n                }\n                const { firstName : name } = person;\n                console.log(name); //\"test\"\n              `}\n            />\n            <strong>EXAMPLE</strong>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                function displayUser({ name, age, address: { city, country } }) {\n                  console.log(Name: {name});\n                  console.log(Age: {age});\n                  console.log(City: {city});\n                  console.log(Country: {country});\n                }\n\n                const user = {\n                  name: 'Jane Smith',\n                  age: 28,\n                  address: {\n                    city: 'Los Angeles',\n                    country: 'USA'\n                  }\n                };\n\n                displayUser(user);\n\n                //Output:\n                Name: Jane Smith\n                Age: 28\n                City: Los Angeles\n                Country: USA\n            `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel45-header\"\n        >\n          <Typography>Rest & Spread Operator</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            <strong>Rest Operator (...):</strong>\n            <br />\n            The rest operator (...) allows you to represent an indefinite number\n            of arguments as an array.\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                const display = (num) => {\n                  console.log(\"num\", num);\n                }\n                display(5) // \"num\", 5\n\n                If we pass more then one argument also we get\n                display(5, 6, 7, 8); //\"num\", 5 But if you do this\n\n                const display = (...num) => {\n                  console.log(\"num\", num);\n                }\n\n                display(5, 6, 7, 8); //\"num\", [5, 6, 7, 8]\n            `}\n            />\n            <strong>Spread Operator (...):</strong>\n            <br />\n            The spread operator (...) allows you to expand an array or object\n            into individual elements.\n            <br />\n            Convenient for merging arrays, copying arrays and objects, and\n            passing multiple arguments to functions.\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                let num = [2, 3, 5,6]\n                console.log(...num) // 2 3 5 6\n\n                const numbers = [1, 2, 3];\n                console.log(Math.max(...numbers)); // Output: 3 (equivalent to Math.max(1, 2, 3))\n\n                const arr1 = [1, 2, 3];\n                const arr2 = [4, 5, 6];\n                console.log(...arr1, ...arr2); //1 2 3 4 5 6\n                const mergedArray = [...arr1, ...arr2];\n                console.log(mergedArray); // Output: [1, 2, 3, 4, 5, 6]\n\n                const obj1 = { x: 1, y: 2 };\n                const obj2 = { ...obj1, z: 3 };\n                console.log(obj2); // Output: { x: 1, y: 2, z: 3 }\n              `}\n            />\n            <strong>\n              spread syntax is the opposite of rest syntax. Spread syntax\n              \"expands\" an array into its elements, while rest syntax collects\n              multiple elements and \"condenses\" them into a single element.\n            </strong>\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel46-header\"\n        >\n          <Typography>Arrow Function</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            They provide a more compact syntax compared to traditional function\n            expressions and offer some additional features\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                function display(num)     }\n                  return num + 1;\n                }\n                console.log(display(2)) //3\n                const display2 = num => num + 1\n                console.log(display2(4)) //5\n              `}\n            />\n            Arrow functions do not have their own this context; instead, they\n            inherit the this value from the surrounding code.\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                function Person() {\n                 this.age = 0;\n\n                  setInterval(() => {\n                    // this refers to the Person object\n                    this.age++;\n                    console.log(this.age);\n                  }, 1000);\n                }\n              `}\n            />\n            const person = new Person();\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel47-header\"\n        >\n          <Typography>NaN</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            NaN stands for \"Not-a-Number\" in JavaScript. It is a special value\n            of the Number type that represents the result of an operation that\n            cannot produce a meaningful numerical result.\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                const result = 'hello' / 5;\n                console.log(result); // Output: NaN\n                const result = parseInt('hello');\n                console.log(result); // Output: NaN\n              `}\n            />\n            It's important to note that NaN is considered a numeric value but is\n            not equal to any other value, including itself:\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                console.log(NaN === NaN); // Output: false\n              `}\n            />\n            you should use the isNaN() function or the Number.isNaN() method\n            introduced in ES6:\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                console.log(isNaN(NaN));        // Output: true\n                console.log(Number.isNaN(NaN)); // Output: true\n            `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel48-header\"\n        >\n          <Typography>Undeclared vs Undefined</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            <strong>Undeclared</strong>\n            <br />\n            An undeclared variable is a variable that has been referenced in\n            code without being declared\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                console.log(foo); // ReferenceError: foo is not defined\n              `}\n            />\n            <strong>Undefined</strong>\n            <br />\n            Undefined is a special value in JavaScript that indicates the\n            absence of a value. It is also the default value of uninitialized\n            variables and the value returned by functions that do not explicitly\n            return a value\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                let bar;\n                console.log(bar); // Output: undefined\n              `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel49-header\"\n        >\n          <Typography>DOM Selectors</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            DOM (Document Object Model) selectors are used to interact with HTML\n            elements in a web page. They allow you to retrieve and manipulate\n            elements dynamically.\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                const element = document.getElementById('myElement');\n\n                getElementById() Shortcut -> const element = document.myElement;\n              `}\n            />\n            getElementsByClassName, getElementsByTagName\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                //Selects the first element that matches a specified CSS selector.\n                const element = document.querySelector('.myClass');\n\n                const elements = document.querySelectorAll('div.myClass');\n\n                //matches() method: checks if an element matches a specified CSS selector. Returns a boolean\n                const matches = element.matches('.myClass')\n              `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel50-header\"\n        >\n          <Typography>How to Copy an Object</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            <strong>1. Object.assign()</strong>\n            <br />\n            The Object.assign() method is used to copy the values of all\n            enumerable own properties from one or more source objects to a\n            target object. It returns the target object.\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                const obj1 = { a: 1, b: 2 };\n                const obj2 = Object.assign({}, obj1);\n                console.log(obj2); //{ a: 1, b: 2 }\n\n                const obj2 = Object.assign(obj1)\n                console.log(obj2); //{ a: 1, b: 2 }\n\n                const obj1 = { a: 1, b: 2 };\n                const obj3 = {c:3, d: 4}\n                const obj2 = Object.assign({},obj1, obj3);\n                console.log(obj2); //{ a: 1, b: 2, c: 3, d: 4 }\n              `}\n            />\n            <strong>2. Spread Operator (...):</strong>\n            <br />\n            The spread operator (...) can also be used to create a shallow copy\n            of an object. It spreads the properties of the source object into a\n            new object.\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                const obj1 = { a: 1, b: 2 };\n                const obj2 = { ...obj1 }; //{ a: 1, b: 2 }\n\n                const obj1 ={a: 1, b: 2, c: {d:4, e:{f:5, g:{h:6, i:7}}}}\n\n                const obj2 = {...obj1}\n                console.log(obj2); //{ a: 1, b: 2, c: { d: 4, e: { f: 5, g: [Object] } } }\n\n                const obj1 = { a: 1, b: 2 };\n                const obj3 = {c:3, d: 4}\n                const obj2 = {obj1, obj3};\n                console.log(obj2); //{ obj1: { a: 1, b: 2 }, obj3: { c: 3, d: 4 } }\n              `}\n            />\n            <strong>3.JSON.parse() and JSON.stringify():</strong>\n            <br />\n            You can convert the object to a JSON string using JSON.stringify(),\n            and then parse the JSON string back into an object using\n            JSON.parse(). This creates a deep copy of the object.\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                const obj1 = { a: 1, b: 2 };\n                const obj2 = JSON.parse(JSON.stringify(obj1));\n              `}\n            />\n            <strong>Shallow vs Deep Copy:</strong>\n            <br />\n            Object.assign() and the spread operator create shallow copies,\n            meaning that nested objects are still references. The JSON method\n            creates a deep copy, cloning all nested objects.\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel51-header\"\n        >\n          <Typography>\n            Unicode VS ASCII (American Standard Code for Information\n            Interchange)\n          </Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            <strong>Unicode</strong>\n            <ul>\n              <li>\n                What it covers: Unicode is a much bigger system. It includes\n                characters from all languages around the world, emojis, symbols,\n                and more. It aims to represent every character from every\n                language.\n              </li>\n              <li>\n                How it works: Like ASCII, Unicode assigns a unique number to\n                each character. However, Unicode can handle a much larger range\n                of numbers to cover all these characters.\n              </li>\n              <li>\n                Encoding: Unicode can be encoded in different ways, like UTF-8\n                or UTF-16. UTF-8 is the most common and flexible, as it uses\n                variable lengths to represent characters efficiently.\n              </li>\n              <li>\n                Usage: It's essential for modern software that needs to support\n                multiple languages, emojis, and diverse symbols. It's used in\n                websites, apps, and systems where internationalization\n                (supporting different languages) is important.\n              </li>\n            </ul>\n            <br />\n            <strong>ASCII</strong>\n            <ul>\n              <li>\n                What it covers: ASCII is a basic coding system for computers. It\n                includes English letters (both uppercase and lowercase),\n                numbers, punctuation marks (like commas and periods), and some\n                control characters (like Enter and Tab).\n              </li>\n              <li>\n                How it works: Each character in ASCII is represented by a\n                number. For example, the letter 'A' is represented by the number\n                65.\n              </li>\n              <li>\n                Limitations: ASCII only covers English characters and some basic\n                symbols. It doesn't support other languages, accents, or special\n                characters.\n              </li>\n              <li>\n                Usage: It's used in older systems, simple programs, and where\n                only basic English characters are needed.\n              </li>\n            </ul>\n            <br />\n            <strong>Key Differences</strong>\n            <ul>\n              <li>\n                Coverage: ASCII covers basic English characters, while Unicode\n                covers characters from all languages and many symbols.\n              </li>\n              <li>\n                Complexity: ASCII is simple and uses fixed-size encoding.\n                Unicode, especially UTF-8, is more complex but flexible and\n                efficient for handling diverse characters.\n              </li>\n              <li>\n                Usage: ASCII is used in simpler applications and older systems,\n                while Unicode is necessary for modern international applications\n                that need to support multiple languages and symbols.\n              </li>\n            </ul>\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel52-header\"\n        >\n          <Typography>Encrypting Vs Hashing</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            <strong>Encrypting</strong>\n            <ul>\n              <li>\n                Purpose: Encryption is used to protect sensitive data by\n                converting it into an unreadable format (cipher text) that can\n                only be decoded (decrypted) back into its original form (plain\n                text) with a specific key or password.\n              </li>\n              <li>\n                Process: Encryption algorithms (such as AES, DES, RSA) use\n                mathematical transformations to scramble data according to a\n                secret key. The encrypted data can only be decrypted by someone\n                who has the correct key.\n              </li>\n              <li>\n                Characteristics:\n                <ul>\n                  <li>\n                    Reversibility: Encryption is reversible, meaning you can\n                    decrypt the encrypted data back to its original form if you\n                    have the decryption key.\n                  </li>\n                  <li>\n                    Security: The security of encryption depends on the strength\n                    of the encryption algorithm and the secrecy of the\n                    encryption key.\n                  </li>\n                  <li>\n                    Usage: Commonly used to protect sensitive information in\n                    transit (e.g., during communication over the internet) and\n                    at rest (e.g., stored data on disk).\n                  </li>\n                </ul>\n              </li>\n            </ul>\n            <br />\n            <strong>Hashing</strong>\n            <ul>\n              <li>\n                Purpose: Hashing is used to verify data integrity and to\n                generate fixed-size, unique representations (hash values) of\n                data, typically for storing passwords securely or validating\n                data.\n              </li>\n              <li>\n                Process: Hash functions (such as SHA-256, MD5, bcrypt) take an\n                input (message) and produce a fixed-size hash value. This value\n                is deterministic (same input produces the same hash), but it is\n                not reversible back to the original data.\n              </li>{\" \"}\n              <li>\n                Characteristics:\n                <ul>\n                  <li>\n                    Irreversibility: Hashing is a one-way process; you cannot\n                    reverse the hash value back to the original data.\n                    Deterministic: The same input always produces the same hash\n                    value.\n                  </li>\n                  <li>\n                    Security: A secure hash function makes it computationally\n                    impractical to reverse-engineer the original data from the\n                    hash value.\n                  </li>\n                  <li>\n                    Usage: Commonly used for password storage (storing hashed\n                    passwords instead of plain text), data integrity\n                    verification, and digital signatures.\n                  </li>\n                </ul>\n              </li>\n            </ul>\n            <strong>Note</strong>\n            <p>\n              If the input is \"Hello World!\" use the hashing algorithm SHA-256\n              we allways get the fixed sixe result, it always produces a 256-bit\n              (32-byte) hash value. standard cryptographic hashing algorithm\n              like SHA-256, you will always get the same output (hash value) for\n              the same input. When we use it to store the password we check the\n              hash value to match the stored hash value instead of the real\n              password.\n            </p>\n            <br />\n            <strong>Key Differences</strong>\n            <ul>\n              <li>\n                Reversibility: Encryption is reversible (plaintext ↔ ciphertext\n                with key), while hashing is irreversible (plaintext → hash).\n              </li>\n              <li>\n                Security Focus: Encryption focuses on confidentiality\n                (protecting data from unauthorized access), while hashing\n                focuses on data integrity (ensuring data has not been altered).\n              </li>\n              <li>\n                Output Size: Encryption output (ciphertext) size depends on\n                input size and algorithm, while hashing produces fixed-size\n                outputs regardless of input size.\n              </li>\n              <li>\n                Use Cases: Encryption is used for securing data in transit and\n                at rest, while hashing is used for storing passwords securely\n                and verifying data integrity.{\" \"}\n              </li>\n            </ul>\n            <strong>Conclusion</strong> <br />\n            In summary, encryption and hashing are both essential techniques in\n            data security, each serving distinct purposes. Encryption protects\n            data confidentiality by reversible transformation, while hashing\n            ensures data integrity through irreversible, fixed-size\n            representations. Understanding when and how to use each technique is\n            crucial for implementing effective data protection strategies in\n            software and systems.\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel53-header\"\n        >\n          <Typography>Objects</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            Objects are a fundamental and versatile data structure used to store\n            collections of key-value pairs. JavaScript objects can be classified\n            by three factors:\n            <ul>\n              <li>Enumerable or non-enumerable</li>\n              <li>String or symbol</li>\n              <li>\n                Own property or inherited property from the prototype chain\n              </li>\n            </ul>\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel54-header\"\n        >\n          <Typography>Enumerable vs Non-enumerable</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            <strong>Enumerable</strong>\n            <br />\n            An enumerable property is one that will be iterated over by methods\n            such as for...in loops and Object.keys(). By default, properties\n            defined directly on an object are enumerable.\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                const obj = { a: 1, b: 2 };\n                for (const key in obj) {\n                  console.log(key); // Output: 'a', 'b'\n                }\n              `}\n            />\n            <strong>Non-enumerable Properties</strong>\n            <br />\n            A non-enumerable property is one that will not be iterated over by\n            for...in loops and will not appear in the result of Object.keys().\n            Non-enumerable properties are typically created using\n            Object.defineProperty() with the enumerable attribute set to false.\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                const obj = {};\n                // Define properties with different enumerability\n                Object.defineProperty(obj, 'a', { value: 1, enumerable: true });\n                Object.defineProperty(obj, 'b', { value: 2, enumerable: false });\n                Object.defineProperty(obj, 'c', { value: 3, enumerable: true });\n\n                // Iterate over the properties using for...in loop\n                console.log('Enumerating properties using for...in loop:');\n                for (const key in obj) {\n                  console.log(key); // Output: 'a', 'c' (b is non-enumerable and not iterated over)\n                }\n\n                // Retrieve keys using Object.keys()\n                console.log('Retrieving keys using Object.keys():');\n                console.log(Object.keys(obj)); // Output: ['a', 'c'] (b is non-enumerable and not included)\n\n                // Check if a property is enumerable\n                console.log('Check if properties are enumerable:');\n                console.log(Object.getOwnPropertyDescriptor(obj, 'a').enumerable); // Output: true\n                console.log(Object.getOwnPropertyDescriptor(obj, 'b').enumerable); // Output: false\n                console.log(Object.getOwnPropertyDescriptor(obj, 'c').enumerable); // Output: true\n              `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel55-header\"\n        >\n          <Typography>Compare 2 Objects</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            {`=== will be false because object uses reference.   => Shallow Equality Check:`}\n            <br />\n            {`We can do JSON.stringfy       => Deep Equality Check (Using JSON.stringify()):`}\n            <CodeSnippet\n              language=\"javascript\"\n              code={`Example:\n                const user1 = {\n                  fn: \"t1\",\n                  lan: \"t2\"\n                };\n\n                const user2 = {\n                  fn: \"t1\",\n                  lan: \"t2\"\n                };\n\n                console.log(user1 === user2) //false\n                console.log(JSON.stringify(user1) === JSON.stringify(user2))\n                //true if you change user2{ lan:”t2, fn:”t1”} this will be false\n              `}\n            />\n            <strong>Deep Equality Check using ladash:</strong>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                const _ = require('lodash');\n                const obj1 = { a: 1, b: { c: 2 } };\n                const obj2 = { a: 1, b: { c: 3 } };\n                console.log(_.isEqual(obj1) === _.isEqual(obj2));\n              `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel56-header\"\n        >\n          <Typography>Services workers</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            Service workers are scripts that your browser runs in the\n            background, separate from a web page, and can intercept network\n            requests, cache or retrieve resources, and provide offline\n            functionality. They enable features like push notifications and\n            background sync.\n            <br />\n            <br />\n            Service workers are a powerful tool for creating web applications\n            that offer a more reliable and engaging user experience, especially\n            in scenarios where network connectivity may be unreliable or\n            intermittent. However, they also require careful implementation to\n            ensure that they enhance the user experience without compromising\n            security or performance.\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel57-header\"\n        >\n          <Typography>Removing Duplicates</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            We can do it different methods like set, filter, reduce and includes\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                const arr = [1, 1,2, 3, 3, 3];\n                const newSet = [... new Set(arr)];\n                console.log('arr', newSet); //arr [ 1, 2, 3 ]\n\n                const newset1 = arr.filter((value, index, array) => array.indexOf(value)=== index)\n                console.log('arr', newset1); // arr [ 1, 2, 3 ]\n\n                Eg: const newSet = [];\n                arr.forEach((item) => {\n                  if(!newSet.includes(item)){\n                    newSet.push(item);\n                  }\n                })\n                console.log(\"newSet\", newSet) //newSet [ 1, 2, 3 ]\n              `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel58-header\"\n        >\n          <Typography>HTTP Methods</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            Its set of request methods :\n            <ul>\n              <li>\n                <strong>Get:</strong>Getting the data from specified resources,\n                can be cached and remain un the browser history\n              </li>\n              <li>\n                <strong>Post:</strong> submit data to be processed to specified\n                resources , can’t cached and no bookmark\n              </li>\n              <li>\n                <strong>Put:</strong> it replace or update the entire resources\n                at specified URL, if its is not available it creates\n              </li>\n              <li>\n                <strong>Patch:</strong> same as Put but it is used when we want\n                to do partial update instead of entire thing\n              </li>\n              <li>\n                <strong>Delete:</strong> remove specified resources\n              </li>\n              <li>\n                <strong>Options:</strong>When a client sends an OPTIONS request\n                to a server, the server responds with a list of HTTP methods and\n                other options that are supported for the requested resource.\n                This allows the client to determine how it can interact with the\n                resource safely and effectively. One of the most common uses of\n                the OPTIONS method is in Cross-Origin Resource Sharing (CORS)\n                requests.\n              </li>\n            </ul>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                Eg: OPTIONS /example HTTP/1.1\n                Host: example.com\n\n                HTTP/1.1 200 OK\n                Allow: GET, POST, OPTIONS\n              `}\n            />\n            <strong>HEAD:</strong>\n            <br />\n            <ul>\n              <li>\n                The HEAD method is similar to GET but is used to request the\n                headers that would be returned if a GET request were to be made\n                to the specified resource.\n              </li>\n              <li>\n                It is useful for obtaining metadata about a resource without\n                transferring the entire content.\n              </li>\n            </ul>\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel59-header\"\n        >\n          <Typography>HTTP Status Code</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            <strong>100</strong> {`-> information`}\n            <br />\n            <strong>200</strong> {`-> success`}\n            <br />\n            <strong>300 </strong>\n            {`-> rerouting`}\n            <br />\n            <strong>400 </strong>\n            {`-> client side error, 401 - auth error, 404 - not found error`}\n            <br />\n            <strong>500</strong> {`-> network error`}\n            <br />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel60-header\"\n        >\n          <Typography>REST</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            REST (Representational State Transfer) is an architectural style for\n            designing networked applications. It defines a set of constraints\n            and principles for building scalable, maintainable, and\n            interoperable web services.\n            <br />\n            <br />\n            <strong>Resource-Based:</strong> In REST, everything is considered a\n            resource, which can be anything that can be uniquely identified.\n            Resources are manipulated using a set of standardized operations,\n            typically HTTP methods (GET, POST, PUT, DELETE, etc.).\n            <br />\n            <strong>Uniform Interface:</strong> REST emphasizes a uniform and\n            consistent interface between clients and servers.\n            <br />\n            <strong>Stateless Communication:</strong> RESTful communication\n            between the client and server is stateless, meaning that each\n            request from the client to the server must contain all the necessary\n            information for the server to fulfill the request.\n            <br />\n            <strong>Client-Server Architecture:</strong> REST separates the\n            client from the server, allowing them to evolve independently.\n            <br />\n            <strong>Cacheability:</strong> Responses from the server can\n            explicitly indicate whether they are cacheable or not.\n            <br />\n            <strong>Layered System:</strong> REST allows for the use of\n            intermediary servers (proxies, gateways, etc.) between the client\n            and server to improve scalability, security, and reliability.\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel61-header\"\n        >\n          <Typography>Rest vs GraphQL</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            REST and GraphQL are both popular approaches for building APIs, but\n            they have different philosophies and characteristics. Here's a\n            comparison between the two.\n            <br />\n            <br />\n            <strong>Data Fetching:</strong>\n            <br />\n            <ul>\n              <li>\n                <strong>REST:</strong> In RESTful APIs, each endpoint typically\n                represents a specific resource, and clients fetch data by making\n                HTTP requests to these endpoints. The server determines the\n                structure of the response.\n              </li>\n              <li>\n                <strong>GraphQL:</strong> With GraphQL, clients can specify\n                exactly what data they need in a single request, and the server\n                returns only that data. Clients can request nested or related\n                data in a single query, reducing over-fetching and\n                under-fetching of data.\n              </li>\n            </ul>\n            <strong>Data Shape:</strong>\n            <br />\n            <ul>\n              <li>\n                <strong>REST:</strong>The server determines the structure of the\n                response, and clients must accept the data in the format\n                provided by the server, often leading to over-fetching or\n                under-fetching of data.\n              </li>\n              <li>\n                <strong>GraphQL:</strong>Clients have more control over the\n                shape of the response data. They can specify the fields they\n                need in the query, and the server returns exactly that data,\n                allowing for more efficient data retrieval.\n              </li>\n            </ul>\n            <strong>Endpoint Structure:</strong>\n            <br />\n            <ul>\n              <li>\n                <strong>REST:</strong>RESTful APIs typically have a fixed set of\n                endpoints, each representing a resource or a collection of\n                resources. Clients make requests to these endpoints using\n                different HTTP methods (GET, POST, PUT, DELETE) to perform CRUD\n                operations.\n              </li>\n              <li>\n                <strong>GraphQL:</strong>There are no fixed endpoints in\n                GraphQL. Instead, there is a single endpoint for executing\n                queries and mutations. Clients send GraphQL queries to this\n                endpoint, specifying the exact data they need, and the server\n                responds with the requested data.\n              </li>\n            </ul>\n            <strong>Versioning:</strong>\n            <br />\n            <ul>\n              <li>\n                <strong>REST:</strong>Versioning of APIs is often done by\n                introducing new endpoints or adding version numbers to the URL.\n                This can lead to endpoint proliferation and maintenance\n                challenges.\n              </li>\n              <li>\n                <strong>GraphQL:</strong>Since there is a single endpoint for\n                executing queries and mutations, versioning is less of an issue.\n                Clients can evolve their queries over time without breaking\n                existing clients. Changes can be introduced gradually without\n                requiring new endpoints.\n              </li>\n            </ul>\n            <strong>Caching:</strong>\n            <ul>\n              <li>\n                <strong>REST:</strong>Caching strategies in RESTful APIs are\n                straightforward, as responses can be cached based on the URL and\n                HTTP method.\n              </li>\n              <li>\n                <strong>GraphQL:</strong>Due to the flexibility of queries and\n                the dynamic nature of the data returned, caching GraphQL\n                responses can be more challenging. Custom caching strategies may\n                be needed to handle caching effectively.\n              </li>\n            </ul>\n            <strong>Tooling and Ecosystem:</strong>\n            <br />\n            <ul>\n              <li>\n                <strong>REST:</strong>RESTful APIs have been around for a long\n                time and have a mature ecosystem with a wide range of tools and\n                libraries available for building and consuming APIs.\n              </li>\n              <li>\n                <strong>GraphQL:</strong>GraphQL is newer and has a growing\n                ecosystem with tools and libraries tailored specifically for\n                GraphQL development. This includes tools for schema validation,\n                query optimization, and client-side caching.\n              </li>\n            </ul>\n            <br />\n            REST is more established and may be a better fit for simpler,\n            resource-based APIs, while GraphQL offers more flexibility and\n            efficiency for complex, dynamic data-fetching requirements.\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel62-header\"\n        >\n          <Typography>Synchronous vs Asynchronous</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            <strong>Synchronous Execution:</strong>\n            <ul>\n              <li>\n                In synchronous code execution, statements are executed one after\n                another in sequence. Each statement waits for the previous one\n                to finish before executing.\n              </li>\n              <li>\n                Synchronous operations block the execution thread, meaning that\n                the code execution cannot proceed to the next statement until\n                the current one completes.\n              </li>\n            </ul>\n            <strong>Asynchronous Execution:</strong>\n            <ul>\n              <li>\n                In asynchronous code execution, tasks are executed independently\n                of the main program flow. Asynchronous operations allow other\n                code to run while waiting for the asynchronous task to complete.\n              </li>\n              <li>\n                Asynchronous operations typically involve callbacks, promises,\n                or async/await syntax to handle the completion of tasks.\n              </li>\n              <li>\n                Asynchronous operations in JavaScript include setTimeout,\n                setInterval, XMLHttpRequest (XHR), fetch API, file I/O, database\n                operations, and more.\n              </li>\n            </ul>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                Eg: console.log(\"Statement 1\");\n                setTimeout(() => console.log(\"Statement 2\"), 1000);\n                console.log(\"Statement 3\");\n              `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel63-header\"\n        >\n          <Typography>Timers</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            In JavaScript, timers are used to schedule code execution at a\n            specified time or after a certain delay. There are three main timer\n            functions provided by the browser environment: setTimeout,\n            setInterval, and clearTimeout.\n            <br />\n            <br />\n            <strong>setTimeout:</strong>\n            <ul>\n              <li>\n                The setTimeout function is used to execute a function or code\n                snippet after a specified delay (in milliseconds). It takes two\n                arguments: a function or code snippet to execute and the delay\n                (in milliseconds).\n              </li>\n            </ul>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                setTimeout(() => console.log(\"Statement 2\"), 1000);\n              `}\n            />\n            <br />\n            <strong>setInterval:</strong>\n            <ul>\n              <li>\n                The setInterval function is used to repeatedly execute a\n                function or code snippet at a specified interval (in\n                milliseconds). It takes two arguments: a function or code\n                snippet to execute and the interval (in milliseconds).\n              </li>\n            </ul>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                const intervalId = setInterval(() => {\n                  console.log('Repeated message');\n                }, 1000); // Execute every 1 second\n\n                // To stop the interval after some time\n                setTimeout(() => {\n                  clearInterval(intervalId);\n                  console.log('Interval stopped');\n                }, 5000);\n              `}\n            />\n            <strong>clearTimeout/clearInterval:</strong>\n            <ul>\n              <li>\n                The clearTimeout function is used to cancel a timeout set by\n                setTimeout, and clearInterval is used to cancel an interval set\n                by setInterval.\n              </li>\n            </ul>\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel64-header\"\n        >\n          <Typography>Promises</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            Promises in JavaScript are used for handling asynchronous\n            operations. A promise represents a value (or the eventual completion\n            or failure of an asynchronous operation) and allows you to attach\n            callback functions to handle the result. Promises provide a cleaner\n            and more flexible alternative to callback-based approaches for\n            managing asynchronous code.\n            <br />\n            <br />\n            <strong>Creating a Promise: </strong>\n            <ul>\n              <li>\n                You create a new promise using the Promise constructor, which\n                takes a function as an argument. This function, called the\n                \"executor function,\" has two parameters: resolve and reject.\n              </li>\n              <li>\n                Inside the executor function, you perform some asynchronous\n                operation, and then call resolve(value) when the operation is\n                successful, or reject(reason) if it fails.\n              </li>\n            </ul>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                const myPromise = new Promise((resolve, reject) => {\n                  // Perform an asynchronous operation\n                  setTimeout(() => {\n                    const result = Math.random();\n                    if (result > 0.5) {\n                      resolve(result); // Operation succeeded\n                    } else {\n                      reject(new Error('Operation failed')); // Operation failed\n                    }\n                  }, 1000);\n                });\n              `}\n            />\n            <strong>Consuming a Promise:</strong>\n            <ul>\n              <li>\n                Once you have a promise, you can attach callback functions using\n                the then and catch methods to handle the resolved value or the\n                rejected reason, respectively.\n              </li>\n              <li>\n                The then method is used to handle the fulfillment of the promise\n                (i.e., when resolve is called), and the catch method is used to\n                handle errors (i.e., when reject is called).\n              </li>\n            </ul>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                myPromise.then((value) => {\n                  console.log('Promise resolved with value:', value);\n                }).catch((error) => {\n                  console.error('Promise rejected with error:', error);\n                });\n              `}\n            />\n            <strong>Chaining Promises:</strong>\n            <ul>\n              <li>\n                Promises can be chained together using multiple then calls. Each\n                then call returns a new promise, allowing you to chain\n                asynchronous operations sequentially.\n              </li>\n              <li>\n                You can also return a new promise from within a then callback to\n                perform additional asynchronous operations.\n              </li>\n            </ul>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                myPromise.then((value) => {\n                  console.log('First promise resolved with value:', value);\n                  return anotherAsyncOperation(); // Return a new promise\n                }).then((result) => {\n                  console.log('Second promise resolved with result:', result);\n                }).catch((error) => {\n                  console.error('Promise chain rejected with error:', error);\n                });\n\n                //EG:\n                const myPromise = new Promise((resolve, reject) => {\n                  const success = true; // Simulate a condition\n\n                  setTimeout(() => {\n                    if (success) {\n                      resolve(\"The operation was successful!\");\n                    } else {\n                      reject(\"The operation failed!\");\n                    }\n                  }, 2000); // 2 seconds delay\n                });\n\n                myPromise\n                  .then((message) => {\n                    console.log(message); // Output: \"The operation was successful!\" after 2 seconds\n                  })\n                  .catch((error) => {\n                    console.error(error);\n                  });\n              `}\n            />\n            <strong>\n              <a\n                href=\"https://en.wikipedia.org/wiki/Concurrent_computing\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                Promise concurrency:\n              </a>\n            </strong>\n            <br />\n            The Promise class offers four static methods to facilitate async\n            task concurrency\n            <br />\n            <strong>\n              <a\n                href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                Promise.all():\n              </a>\n            </strong>\n            <br />\n            Fulfills when all of the promises fulfill; rejects when any of the\n            promises rejects.\n            <br />\n            <strong>\n              <a\n                href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/allSettled\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                Promise.allSettled():\n              </a>\n            </strong>\n            <br />\n            Fulfills when all promises settle.\n            <br />\n            <strong>\n              <a\n                href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/any\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                Promise.any():\n              </a>\n            </strong>\n            <br />\n            Fulfills when any of the promises fulfills; rejects when all of the\n            promises reject.\n            <br />\n            <strong>\n              <a\n                href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                Promise.race():\n              </a>\n            </strong>\n            <br />\n            Settles when any of the promises settles. In other words, fulfills\n            when any of the promises fulfills; rejects when any of the promises\n            rejects.\n            <br />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel65-header\"\n        >\n          <Typography>Every</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            This is done in the array.\n            <br />\n            Take every element of the array and do the calculations like add,\n            check etc.\n            <br />\n            It return Boolean value\n            <br />\n            <br />\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n            Eg:\n                let arr1 =[3, 5, 6, 9];\n                console.log(arr1.every(ele => ele > 2)) //true\n                console.log(arr1.every(ele => ele > 10)) //false\n\n            Eg:\n                Str = ‘appa’\n                let test = str.split('').every((char, i) => {\n                  return char === str[str.length -1 -i]\n                });\n\n                console.log('Test', test) //true\n              `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel66-header\"\n        >\n          <Typography>Finding array length with out length</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                let arr = [2, 4, ,6 ,7];\n                let len = arr.reduce(acc => acc + 1, 0);\n\n                console.log(len) //4\n              `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel67-header\"\n        >\n          <Typography>Async/Await</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            async/await is a modern approach to handle asynchronous code, making\n            it look more synchronous and easier to read.\n            <br />\n            <br />\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n              // Longhand\n                function fetchData() {\n                  return fetch('https://api.example.com/data')\n                  .then((response) => response.json())\n                  .then((data) => {\n                    console.log(data);\n                  })\n                  .catch((error) => {\n                    console.error(error);\n                  });\n                }\n              `}\n            />\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n              // Shorthand\n                async function fetchData() {\n                  try {\n                    const response = await fetch('https://api.example.com/data');\n                    const data = await response.json();\n                    console.log(data);\n                  } catch (error) {\n                    console.error(error);\n                  }\n                }\n              `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel68-header\"\n        >\n          <Typography>HOF</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            Higher-order functions (HOFs) are a powerful concept in JavaScript\n            that allow you to work with functions in new and innovative ways.\n            Here's a breakdown of what they are and how they're used:\n            <br />\n            <br />\n            <strong>Concept:</strong>\n            <ul>\n              <li>\n                A higher-order function is a function that does one or both of\n                the following:\n              </li>\n              <li>\n                Takes one or more functions as arguments. These functions are\n                often called callbacks.\n              </li>\n              <li>Returns a new function as its result.</li>\n              <li>\n                HOFs essentially treat functions as first-class citizens in\n                JavaScript, allowing you to pass them around and manipulate them\n                like any other data type.\n              </li>\n            </ul>\n            <strong>Benefits:</strong>\n            <ul>\n              <li>\n                <strong>Abstraction:</strong> HOFs help you encapsulate complex\n                logic into reusable functions, promoting code readability and\n                maintainability.\n              </li>\n              <li>\n                <strong>Composition:</strong> You can combine smaller HOFs to\n                create more complex functionalities, making your code more\n                modular and easier to test.\n              </li>\n              <li>\n                <strong> Flexibility:</strong> HOFs allow you to write generic\n                code that can work with different types of data and functions.\n              </li>\n            </ul>\n            <strong>Common HOFs in JavaScript:</strong>\n            <ul>\n              <li>\n                <strong>map():</strong> This function applies a callback\n                function to each element in an array and returns a new array\n                with the transformed elements.\n              </li>\n              <li>\n                <strong>filter():</strong> This function creates a new array\n                with all elements that pass a test implemented by the provided\n                callback function.\n              </li>\n              <li>\n                <strong>reduce():</strong> This function iterates over an array\n                and applies a callback function against an accumulator and each\n                element to reduce it to a single value.\n              </li>\n              <li>\n                <strong>forEach():</strong> This function executes a provided\n                function once for each array element.\n              </li>\n            </ul>\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel69-header\"\n        >\n          <Typography>Different data types</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            To know the type of a JavaScript variable, we can use the typeof\n            operator.\n            <br />\n            <br />\n            <ol>\n              <li>Primitive types</li>\n              <ul>\n                <li>\n                  <strong>String</strong>\n                  <br />\n                  It represents a series of characters and is written with\n                  quotes. A string can be represented using a single or a double\n                  quote.\n                  <CodeSnippet\n                    language=\"javascript\"\n                    code={`\n                      var str = \"Vivek Singh Bisht\"; //using double quotes\n                      var str2 = 'John Doe'; //using single quotes\n                    `}\n                  />\n                </li>\n                <li>\n                  <strong>Number</strong>\n                  <br />\n                  It represents a number and can be written with or without\n                  decimals.\n                  <CodeSnippet\n                    language=\"javascript\"\n                    code={`\n                      var x = 3; //without decimal\n                      var y = 3.6; //with decimal\n                    `}\n                  />\n                </li>\n                <li>\n                  <strong>BigInt</strong>\n                  <br />\n                  This data type is used to store numbers which are above the\n                  limitation of the Number data type. It can store large\n                  integers and is represented by adding “n” to an integer\n                  literal.\n                  <CodeSnippet\n                    language=\"javascript\"\n                    code={`\n                      var bigInteger =  234567890123456789012345678901234567890;\n                    `}\n                  />\n                </li>\n                <li>\n                  <strong>Boolean</strong>\n                  <br />\n                  It represents a logical entity and can have only two values :\n                  true or false. Booleans are generally used for conditional\n                  testing.\n                  <CodeSnippet\n                    language=\"javascript\"\n                    code={`\n                      var a = 2;\n                      var b =  3;\n                      var c =  2;\n                      (a == b) // returns false\n                      (a == c) //returns true\n                    `}\n                  />\n                </li>\n                <li>\n                  <strong>Undefined</strong>\n                  <br /> When a variable is declared but not assigned, it has\n                  the value of undefined and it's type is also undefined.\n                  <CodeSnippet\n                    language=\"javascript\"\n                    code={`\n                      var x; // value of x is undefined\n                      var y = undefined; // we can also set the value of a variable as undefined\n                    `}\n                  />\n                </li>\n                <li>\n                  <strong>Null</strong>\n                  <br /> It represents a non-existent or a invalid value.\n                  <CodeSnippet\n                    language=\"javascript\"\n                    code={`\n                      var z = null;\n                    `}\n                  />\n                </li>\n                <li>\n                  <strong>Symbol</strong> <br />\n                  It is a new data type introduced in the ES6 version of\n                  javascript. It is used to store an anonymous and unique value.\n                  <CodeSnippet\n                    language=\"javascript\"\n                    code={`\n                      var symbol1 = Symbol('symbol');\n                    `}\n                  />\n                </li>\n                <li>\n                  <strong>typeof of primitive types :</strong>\n                  <CodeSnippet\n                    language=\"javascript\"\n                    code={`\n                      typeof \"John Doe\" // Returns \"string\"\n                      typeof 3.14 // Returns \"number\"\n                      typeof true // Returns \"boolean\"\n                      typeof 234567890123456789012345678901234567890n // Returns bigint\n                      typeof undefined // Returns \"undefined\"\n                      typeof null // Returns \"object\" (kind of a bug in JavaScript)\n                      typeof Symbol('symbol') // Returns Symbol\n                    `}\n                  />\n                </li>\n              </ul>\n              <li>Non-primitive types</li>\n              <ul>\n                <li>\n                  Primitive data types can store only a single value. To store\n                  multiple and complex values, non-primitive data types are\n                  used.\n                </li>\n                <li>Object - Used to store collection of data.</li>\n                <CodeSnippet\n                  language=\"javascript\"\n                  code={`\n                      var obj1 = {\n                        x:  43,\n                        y:  \"Hello world!\",\n                        z: function(){\n                          return this.x;\n                        }\n                      }\n                      // Collection of data as an ordered list\n                      var array1 = [5, \"Hello\", true, 4.1];\n                  `}\n                />\n              </ul>\n            </ol>\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel69-header\"\n        >\n          <Typography>\n            ES6 (ECMAScript 6) vs ES2015 (ECMAScript 2015)\n          </Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            <strong>Key Features</strong>\n            <ul>\n              <li>\n                <strong>Arrow Functions:</strong> Syntax for shorter function\n                definitions and lexical scoping for this.\n                <CodeSnippet\n                  language=\"javascript\"\n                  code={`\n                    eg:\n                    const add = (a, b) => a + b;\n                  `}\n                />\n              </li>\n              <li>\n                <strong>Classes:</strong>A more concise and object-oriented way\n                to create classes and inheritance.\n                <CodeSnippet\n                  language=\"javascript\"\n                  code={`\n                  Eg:\n                    class Animal {\n                      constructor(name) {\n                        this.name = name;\n                      }\n                      speak() {\n                        console.log($'{this.name} makes a sound.');\n                      }\n                    }\n                  `}\n                />\n              </li>\n              <li>\n                <strong>Modules:</strong>\n                <br />\n                Standardized the use of import/export for modular code.\n                <CodeSnippet\n                  language=\"javascript\"\n                  code={`\n                    // module.js\n                    export const add = (a, b) => a + b;\n\n                    // main.js\n                    import { add } from './module';\n                  `}\n                />\n              </li>\n              <li>\n                <strong>Template Literals:</strong>\n                <br />\n                Enhanced string literals that allow for embedded expressions.\n                <CodeSnippet\n                  language=\"javascript\"\n                  code={`\n                    const name = 'World';\n                    console.log('Hello,$ {name}!');\n                  `}\n                />\n              </li>\n              <li>\n                <strong>Let and Const:</strong>\n                <br />\n                Block-scoped variable declarations, providing better scoping\n                rules than var.\n                <CodeSnippet\n                  language=\"javascript\"\n                  code={`\n                    let x = 10;\n                    const y = 20;\n                  `}\n                />\n              </li>\n              <li>\n                <strong>Destructuring Assignment:</strong>\n                <br />A syntax for unpacking values from arrays or properties\n                from objects.\n                <CodeSnippet\n                  language=\"javascript\"\n                  code={`\n                    const [a, b] = [1, 2];\n                    const {name, age} = {name: 'Alice', age: 25 };\n                `}\n                />\n              </li>\n              <li>\n                <strong>Default Parameters:</strong>\n                <br />\n                Allows function parameters to have default values.\n                <CodeSnippet\n                  language=\"javascript\"\n                  code={`\n                    function greet(name = 'Guest') {\n                      console.log('Hello,$ {name}');\n                    }\n                  `}\n                />\n              </li>\n              <li>\n                <strong>Rest and Spread Operators:</strong>\n                <br />\n                Spread (...) allows an iterable to expand in places where\n                multiple arguments or elements are expected. Rest (...) gathers\n                elements into an array.\n                <CodeSnippet\n                  language=\"javascript\"\n                  code={`\n                    const arr = [1, 2, 3];\n                    const newArr = [...arr, 4, 5];\n\n                    function sum(...args) {\n                      return args.reduce((acc, val) => acc + val, 0);\n                    }\n                  `}\n                />\n              </li>\n              <li>\n                <strong>Promises:</strong>\n                <br />A native way to handle asynchronous operations.\n                <CodeSnippet\n                  language=\"javascript\"\n                  code={`\n                    const fetchData = () => {\n                      return new Promise((resolve, reject) => {\n                        setTimeout(() => resolve('Data loaded'), 1000);\n                      });\n                    };\n\n                    fetchData().then(data => console.log(data));\n                  `}\n                />\n              </li>\n              <li>\n                <strong>Symbols:</strong>\n                <br />A new primitive type that is unique and immutable, often\n                used to create unique property keys.\n                <CodeSnippet\n                  language=\"javascript\"\n                  code={`\n                    const uniqueKey = Symbol('unique');\n                    const obj = {\n                      [uniqueKey]: 'value'\n                    };\n                  `}\n                />\n              </li>\n            </ul>\n            <strong> Summary of Key Differences</strong>\n            <ul>\n              <li>\n                <strong>ES6:</strong> An informal, shorthand name that continues\n                to be widely recognized and used within the developer community.\n              </li>\n              <li>\n                <strong>ES2015:</strong> The official name that aligns with the\n                standardized naming convention reflecting the year of release.\n              </li>\n            </ul>\n            <strong> Conclusion</strong>\n            <br />\n            In practice, ES6 and ES2015 can be used interchangeably. When you\n            hear ES6, think of it as the informal, widely recognized name, and\n            when you hear ES2015, recognize it as the formal, year-based name\n            introduced with this edition. Both refer to the same pivotal update\n            to JavaScript that introduced many of the features that modern\n            developers rely on today.\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel70-header\"\n        >\n          <Typography>ES6 vs ES7</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            <strong>ES7</strong>\n            ES7 was a much smaller update compared to ES6, introducing just a\n            couple of new features:\n            <ul>\n              <li>\n                <strong>Exponentiation Operator:</strong>\n                A new operator for exponentiation.\n                <CodeSnippet\n                  language=\"javascript\"\n                  code={`\n                  const square = 2 ** 2; // 4\n                  const cube = 2 ** 3; // 8\n                  `}\n                />\n              </li>\n              <li>\n                <strong>Array.prototype.includes:</strong>\n                A new method to check if an array includes a certain element.\n                <CodeSnippet\n                  language=\"javascript\"\n                  code={`\n                const array = [1, 2, 3];\n                const hasTwo = array.includes(2); // true\n                `}\n                />\n              </li>\n            </ul>\n            <strong>Summary</strong>\n            <ul>\n              <li>\n                <strong>ES6:</strong> A major update with many new features like\n                classes, arrow functions, modules, promises, template literals,\n                default parameters, and destructuring.\n              </li>\n              <li>\n                <strong>ES7:</strong> A minor update with only two new features:\n                the exponentiation operator (**) and the\n                Array.prototype.includes method.\n              </li>\n            </ul>\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel71-header\"\n        >\n          <Typography>debugger</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            The debugger for the browser must be activated in order to debug the\n            code. Built-in debuggers may be switched on and off, requiring the\n            user to report faults. The remaining section of the code should stop\n            execution before moving on to the next line while debugging.\n            <br />\n            The debugger keyword in JavaScript is a tool used to stop the\n            execution of code and trigger a breakpoint in the browser's\n            debugging tool. When the code execution reaches the debugger\n            statement, it pauses, allowing developers to inspect variables, step\n            through code, and troubleshoot issues interactively.\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n    </Container>\n  );\n};\n\nexport default JavaScriptList;\n","import React, { useState } from \"react\";\nimport {\n  Container,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails,\n  Typography,\n  TableContainer,\n  Table,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableBody,\n  Paper,\n} from \"@mui/material\";\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\nimport CodeSnippet from \"../CodeSnippet\";\n\nconst ReactList = () => {\n  const [expanded, setExpanded] = useState(false);\n\n  const handleExpansion = () => {\n    setExpanded((prevExpanded) => !prevExpanded);\n  };\n\n  return (\n    <Container>\n      <Accordion\n        expanded={expanded}\n        onChange={handleExpansion}\n        // slots={{ transition: Fade }}\n        // slotProps={{ transition: { timeout: 400 } }}\n      >\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>Features of React</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            ReactJS is a JavaScript library used to build reusable components\n            for the view layer in MVC architecture. It is highly efficient and\n            uses a virtual DOM to render components. It works on the client side\n            and is written in JSX.\n            <ul>\n              <li>\n                <strong>JSX:</strong>\n                JSX is a syntax extension to JavaScript. JSX stands for\n                JavaScript XML. JSX allows us to write HTML in React. JSX makes\n                it easier to write and add HTML in React.\n                <br />\n                Web browsers cannot read JSX directly. This is because they are\n                built to only read regular JS objects and JSX is not a regular\n                JavaScript object. <br />\n                For a web browser to read a JSX file, the file needs to be\n                transformed into a regular JavaScript object. For this, we use\n                Babel\n              </li>\n              <CodeSnippet\n                language=\"javascript\"\n                code={`\n                  const name = 'Josh Perez';\n                  const element = <h1>Hello, {name}</h1>;\n                 `}\n              />\n              <li>\n                <strong>Components:</strong> Components are independent and\n                reusable bits of code. They serve the same purpose as JavaScript\n                functions, but work in isolation and return HTML. Components\n                come in two types, Class components and Function components, in\n                this tutorial we will concentrate on Function components.\n              </li>\n              <li>\n                <strong>Virtual DOM:</strong> React keeps a lightweight\n                representation of the real DOM in the memory, and that is known\n                as the virtual DOM. When the state of an object changes, virtual\n                DOM changes only that object in the real DOM, rather than\n                updating all the objects.\n                <br />\n                <br />\n                <TableContainer component={Paper} variant=\"outlined\">\n                  <Table>\n                    <TableHead>\n                      <TableRow>\n                        <TableCell>Real DOM</TableCell>\n                        <TableCell>Virtual DOM</TableCell>\n                      </TableRow>\n                    </TableHead>\n                    <TableBody>\n                      <TableRow>\n                        <TableCell>\n                          when the actual structure of the web page (which is\n                          not lightweight) or document is represented by DOM.\n                        </TableCell>\n                        <TableCell>\n                          The virtual DOM is a lightweight and in-memory\n                          representation\n                        </TableCell>\n                      </TableRow>\n                      <TableRow>\n                        <TableCell>\n                          Any change causes the entire DOM tree to be updated.\n                        </TableCell>\n                        <TableCell>\n                          Any change only affects the corresponding node in the\n                          tree.\n                        </TableCell>\n                      </TableRow>\n                      <TableRow>\n                        <TableCell>\n                          It is an HTML abstraction of a page.\n                        </TableCell>\n                        <TableCell>It is an HTML DOM abstraction.</TableCell>\n                      </TableRow>\n                      <TableRow>\n                        <TableCell>\n                          It is capable of manipulating items on the screen.\n                        </TableCell>\n                        <TableCell>\n                          It is unable to manipulate the elements displayed on\n                          the screen.\n                        </TableCell>\n                      </TableRow>\n                      <TableRow>\n                        <TableCell>\n                          Every modification updates the complete DOM tree,\n                          which is a laborious and slow operation.\n                        </TableCell>\n                        <TableCell>\n                          Because the update is tailored to the modified nodes,\n                          its update operation is quick and effective.\n                        </TableCell>\n                      </TableRow>\n                    </TableBody>\n                  </Table>\n                </TableContainer>\n              </li>\n              <li>\n                <strong>One-way data-binding:</strong> One-way means that the\n                binding happens in one direction. In this case, changes in the\n                data automatically update the UI, but changes in the UI do not\n                automatically update the data. That’s why it is referred to as\n                one-way data binding.\n                <br />\n                React achieves one-way data binding by using state and props.\n              </li>\n              <li>\n                <strong>High performance:</strong> React updates only those\n                components that have changed, rather than updating all the\n                components at once. This results in much faster web\n                applications.\n              </li>\n            </ul>\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>MVC architecture</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            The Model-View-Controller (MVC) framework is an architectural/design\n            pattern that separates an application into three main logical\n            components Model, View, and Controller. Each architectural component\n            is built to handle specific development aspects of an application.\n            It isolates the business, logic, and presentation layer from each\n            other\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>Class Component</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            {`A class component must include the extends React.Component statement. This statement creates an inheritance to React.Component, and gives your component access to React.Component's functions.`}\n            <br />\n            {`The component also requires a render() method, this method returns HTML.`}\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                class Car extends React.Component {\n                  render() {\n                    return <h2>Hi, I am a Car!</h2>;\n                  }\n                }\n              `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>Function Component</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            {`Here is the same example as above, but created using a Function component instead.`}\n            <br />\n            {`A Function component also returns HTML, and behaves much the same way as a Class component, but Function components can be written using much less code, are easier to understand.`}\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                function Car() {\n                  return <h2>Hi, I am a Car!</h2>;\n                }\n              `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>Event React</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            An event is an action that a user or system may trigger, such as\n            pressing a key, a mouse click, etc.\n          </Typography>\n          <ul>\n            <li>\n              React events are named using camelCase, rather than lowercase in\n              HTML.\n            </li>\n            <li>\n              With JSX, you pass a function as the event handler, rather than a\n              string in HTML.\n            </li>\n          </ul>\n          <CodeSnippet\n            language=\"javascript\"\n            code={`\n                <Button onPress={lightItUp} />\n              `}\n          />\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>React.js vs Angular.js</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            <TableContainer component={Paper} variant=\"outlined\">\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Field</TableCell>\n                    <TableCell>React.js</TableCell>\n                    <TableCell>Angular</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  <TableRow>\n                    <TableCell>Used as</TableCell>\n                    <TableCell>\n                      React.js is a JavaScript library. As it indicates react js\n                      updates only the virtual DOM is present and the data flow\n                      is always in a single direction.\n                    </TableCell>\n                    <TableCell>\n                      Angular is a framework. Angular updates the Real DOM and\n                      the data flow is ensured in the architecture in both\n                      directions.\n                    </TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell>Architecture</TableCell>\n                    <TableCell>\n                      React.js is more simplified as it follows MVC ie., Model\n                      View Control.\n                    </TableCell>\n                    <TableCell>\n                      The architecture is complex as it follows MVVM models ie.,\n                      Model View-ViewModel.{\" \"}\n                    </TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell>Scalability</TableCell>\n                    <TableCell>It is highly scalable.</TableCell>\n                    <TableCell>It is less scalable than React JS.</TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell>Data Binding</TableCell>\n                    <TableCell>\n                      It supports Uni-directional data binding which is one-way\n                      data binding.\n                    </TableCell>\n                    <TableCell>\n                      It supports Bi-directional data binding which is two way\n                      data binding.\n                    </TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell>DOM</TableCell>\n                    <TableCell>It has a virtual DOM.</TableCell>\n                    <TableCell>It has regular DOM.</TableCell>\n                  </TableRow>\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>SyntheticEvent</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            SyntheticEvent is a cross-browser wrapper around the native browser\n            event. React uses it to handle events in a consistent way across\n            different browsers. Synthetic events are normalized, meaning they\n            have the same properties and methods as native events but behave\n            consistently across different environments.\n            <br />\n            For example in onMouseLeave event.nativeEvent will point to a\n            mouseout event. The specific mapping is not part of the public API\n            and may change at any time.\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel1-content\"\n          id=\"panel1-header\"\n        >\n          <Typography>React vs React Native</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            <TableContainer component={Paper} variant=\"outlined\">\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell></TableCell>\n                    <TableCell>React</TableCell>\n                    <TableCell>React Native</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  <TableRow>\n                    <TableCell>Purpose</TableCell>\n                    <TableCell>\n                      React (also known as React.js or ReactJS) is a JavaScript\n                      library for building user interfaces, specifically for\n                      building web applications.\n                    </TableCell>\n                    <TableCell>\n                      React Native is a framework for building mobile\n                      applications using React.\n                    </TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell>Platform</TableCell>\n                    <TableCell>\n                      It is used for developing web applications that run in a\n                      web browser.\n                    </TableCell>\n                    <TableCell>\n                      It is used for developing native mobile apps for iOS and\n                      Android.\n                    </TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell>Rendering</TableCell>\n                    <TableCell>{`In React, components render to HTML elements (like <div>, <span>, etc.). These components are manipulated in the browser's DOM.`}</TableCell>\n                    <TableCell>\n                      React Native components do not render to HTML elements.\n                      Instead, they render to native components like View, Text,\n                      Image, which are then translated into native UI elements\n                      on the iOS and Android platforms.\n                    </TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell>Component Libraries</TableCell>\n                    <TableCell>\n                      React has a vast ecosystem of libraries for web\n                      development, such as Material-UI, Bootstrap, Ant Design,\n                      etc.\n                    </TableCell>\n                    <TableCell>\n                      React Native has its own ecosystem of components designed\n                      for mobile development, like View, Text, TouchableOpacity,\n                      FlatList, etc. It also has libraries like React Native\n                      Elements, NativeBase, and others for building mobile UIs.\n                    </TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell>Styling</TableCell>\n                    <TableCell>\n                      In React, CSS is used for styling. You can use traditional\n                      CSS, CSS-in-JS, or pre-processors like Sass and Less.\n                    </TableCell>\n                    <TableCell>\n                      You use JavaScript objects to style components, which is\n                      somewhat similar to inline styles in React but with a\n                      different set of styling properties. React Native uses\n                      StyleSheet.create to define these styles.\n                    </TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell>Navigation</TableCell>\n                    <TableCell>\n                      It uses libraries like React Router for handling routing\n                      and navigation within web applications.\n                    </TableCell>\n                    <TableCell>\n                      It uses libraries like React Navigation or native\n                      navigation solutions to handle navigation between\n                      different screens in a mobile app.\n                    </TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell>Development Experience</TableCell>\n                    <TableCell>\n                      {\" \"}\n                      Development is focused on the browser, and you can use\n                      browser developer tools for debugging. Hot reloading and\n                      fast refresh are commonly used.\n                    </TableCell>\n                    <TableCell>\n                      Development happens in a mobile simulator/emulator or on a\n                      physical device. React Native also supports hot reloading\n                      and fast refresh, and debugging can be done with tools\n                      like Flipper or through the React Native Debugger.\n                    </TableCell>\n                  </TableRow>\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>render()</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            In React, the render() method is used in class components to define\n            what the UI should look like. It returns the HTML-like structure\n            (written in JSX) that React will display on the screen.\n            <ul>\n              <li>\n                <strong>Purpose:</strong>It tells React what to display.\n              </li>\n              <li>\n                <strong>Return Value:</strong>\n                {`It must return a single element, like a <div>, or a group of elements wrapped in a single parent or a fragment.`}\n              </li>\n              <li>\n                <strong>Re-rendering:</strong>Whenever the component’s state or\n                props change, render() is called again to update the UI.\n              </li>\n            </ul>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                import React, { Component } from 'react';\n\n                class MyComponent extends Component {\n                  render() {\n                    return (\n                      <div>\n                        <h1>Hello, {this.props.name}!</h1>\n                      </div>\n                    );\n                  }\n                }\n              `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>State in React</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            In React, state is an object that stores dynamic data and determines\n            how a component behaves and what it displays. Unlike props, which\n            are passed to a component from its parent, state is managed within\n            the component itself and can change over time, typically in response\n            to user actions, network responses, or other events.\n            <ul>\n              <li>\n                <strong>Mutable:</strong>Unlike props, which are read-only,\n                state can be updated. When the state changes, the component\n                re-renders to reflect the new state.\n              </li>\n              <li>\n                <strong>Initialization:</strong>In class components, the state\n                is initialized in the constructor, while in functional\n                components, it’s initialized using the useState hook.\n              </li>\n              <li>\n                <strong>Changing State: </strong>State should be updated using\n                the setState method (in class components) or the setState\n                function provided by useState (in functional components).\n                Directly modifying the state (like this.state.someValue =\n                newValue) is discouraged because it won’t trigger a re-render\n              </li>\n            </ul>\n            <strong>Example in a Class Component:</strong>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                class MyComponent extends Component {\n                  constructor(props) {\n                    super(props);\n                    this.state = {\n                      count: 0\n                    };\n                  }\n\n                  incrementCount = () => {\n                    this.setState({ count: this.state.count + 1 });\n                  };\n\n                  render() {\n                    return (\n                      <div>\n                        <p>Count: {this.state.count}</p>\n                        <button onClick={this.incrementCount}>Increment</button>\n                      </div>\n                    );\n                  }\n                }\n              `}\n            />\n            <strong>Example in a Functional Component with useState:</strong>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                import React, { useState } from 'react';\n\n                function MyComponent() {\n                  const [count, setCount] = useState(0);\n\n                  return (\n                    <div>\n                      <p>Count: {count}</p>\n                      <button onClick={() => setCount(count + 1)}>Increment</button>\n                    </div>\n                  );\n                }\n              `}\n            />\n            <ul>\n              <li>\n                State is used to manage dynamic data in a React component.\n              </li>\n              <li>\n                Updating State triggers a re-render, allowing the UI to reflect\n                the new data.\n              </li>\n              <li>\n                Class Components use this.state and this.setState, while\n                Functional Components use the useState hook to manage state.\n              </li>\n            </ul>\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>setState</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            setState is an asynchronous call means if a synchronous call gets\n            called it may not get updated at the right time like to know the\n            current value of an object after an update using setState it may not\n            give the current updated value on the console. To get some behavior\n            of synchronous need to pass function instead of object to setState.\n            <br />\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                setState({ stateName : updatedStateValue })\n                // OR\n                setState((prevState) => ({\n                  stateName: prevState.stateName + 1\n                }))\n              `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>ref in React</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            Refs are a function provided by React to access the DOM element and\n            the React element that you might have created on your own. They are\n            used in cases where we want to change the value of a child\n            component, without making use of props and all. They have wide\n            functionality as we can use callbacks with them.\n            <br />\n            The syntax to use ref is\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                const node = this.myCallRef.current;\n              `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>Hooks</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            Hooks are a new addition in React 16.8. They let developers use\n            state and other React features without writing a class. Hooks\n            doesn’t violate any existing React concepts. Instead, Hooks provide\n            a direct API to react concepts such as props, state, context, refs\n            and life-cycle.\n            <br />\n            They provide a cleaner and more concise way to handle state and side\n            effects in React applications.\n            <br />\n            Although Hooks generally replace class components, no plans exist to\n            remove classes from React.\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>useState</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            The most used hook in React is the useState() hook. It allows\n            functional components to manipulate DOM elements before each render.\n            Using this hook we can declare a state variable inside a function\n            but only one state variable can be declared using a single\n            useState() hook. Whenever the useState() hook is used, the value of\n            the state variable is changed and the new variable is stored in a\n            new cell in the stack.\n            <br />\n            We have to import this hook in React using the following syntax.\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                import {useState} from 'react'\n              `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>useEffect</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            The useEffect hook in React eliminates the side effect of using\n            class based components. It is used as an alternative to\n            componentDidUpdate() method. The useEffect hook accepts two\n            arguments where second argument is optional.\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                useEffect(function, dependency)\n              `}\n            />\n            The dependency decides when the component will be updated again\n            after rendering.\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>React Fragments</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            when we are trying to render more than one root element we have to\n            put the entire content inside the ‘div’ tag which is not loved by\n            many developers. So since React 16.2 version, Fragments were\n            introduced, and we use them instead of the extraneous ‘div’ tag. The\n            following syntax is used to create fragment in react.\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                <React.Fragment>\n                    <h2>Child-1</h2>\n                    <p> Child-2</p>\n                </React.Fragment>\n              `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>Custom hooks</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            We know that hooks like useState, and useEffect are reusable\n            components. Sometimes we make components that we have to reuse again\n            and again in the application. In this case, we can convert the\n            component to hooks by extracting logic from it.\n            <br />\n            The main reason why you should be using Custom hooks is to maintain\n            the concept of DRY(Don’t Repeat Yourself) in your React apps.\n            <strong>Building a custom hook</strong>\n            Creating a custom hook is the same as creating a JavaScript function\n            whose name starts with “use”. It can use other hooks inside it,\n            return anything you want it to return, take anything as parameters.\n            <br />\n            <strong>Note:</strong> It is important to name your custom hooks\n            starting with “use”, because without it React can’t realize that it\n            is a custom hook and therefore can’t apply the rules of hooks to it.\n            So, you should name it starting with “use”.\n            <br />\n            <strong>Create a React Component</strong>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                Let us first create a component where we are not creating custom hook\n                // Filename - src/components/FirstComponent.js\n\n                import React , {useState ,useEffect} from \"react\";\n\n                function FirstComponent(props){\n\n                    const [counter , setCounter] = useState(initializer);\n\n                    // Increases the value of counter by 1\n                      function resetCounter(){\n                        setCounter(counter + 1):\n                    }\n\n                    useEffect(() => {\n                        // Some logic\n                        console.log(counter);\n                    } , [counter]);\n\n                    const clickedButton = resetCounter;\n\n                    return (\n                        <div>\n                            <h1> This is the First Component</h1>\n                            <button onClick={clickedButton}>\n                              Click here!\n                            </button>\n                        </div>\n                    );\n                }\n\n                export default FirstComponent;\n              `}\n            />\n            Suppose we have to use this counter in multiple components then we\n            would require a custom hook that can perfrom the same function\n            multiple times.\n            <br />\n            <br />\n            <strong>Creating a custom hook</strong>\n            <br />\n            Create the custom hook as shown in the example below\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                // Filename- src/components/useCustomHook.js\n\n                import {useState , useEffect} from \"react\";\n\n                // Remember to start the name of your custom hook with \"use\"\n                function useCustomHook(initializer , componentName){\n                    const [counter , setCounter] = useState(initializer);\n\n                    // Increases the value of counter by 1\n                      function resetCounter(){\n                        setCounter(counter + 1);\n                    }\n\n                    useEffect(() => {\n                        // Some logic that will be used in multiple components\n                        console.log(\"The button of the \"\n                        + componentName + \" is clicked \"\n                        + counter + \" times.\");\n                    } , [counter , componentName]);\n\n                    // Calls the useEffect hook if the counter updates\n                    return resetCounter;\n                }\n\n                export default useCustomHook;\n              `}\n            />\n            <strong>Using the custom hook in components</strong>\n            <br />\n            To use the custom hook in your components just import the\n            “useCustomHook” function from “useCustomHook.js” file in the “src”\n            folder.\n            <ul>\n              <li>\n                <strong>src/components/FirstComponent.js:</strong> This\n                component will import customHook\n              </li>\n              <li>\n                <strong>src/components/SecondComponent.js:</strong> This\n                component will also import customHook\n              </li>\n              <li>\n                <strong>src/App.js:</strong> We will render the components in\n                this file\n              </li>\n            </ul>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                // Filename - First Component\n                import React from \"react\";\n\n                // importing the custom hook\n                import useCustomHook from \"./useCustomHook\";\n\n                function FirstComponent(props){\n\n                    // ClickedButton = resetCounter;\n                    const clickedButton = useCustomHook(0 , \"FirstComponent\");\n\n                    return (\n                        <div>\n                            <h1> This is the First Component</h1>\n                            <button onClick={clickedButton}>\n                                  Click here!\n                            </button>\n                        </div>\n                    );\n                }\n\n                export default FirstComponent;\n              `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>Optimize the performance of React app</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            <a\n              href=\"https://www.geeksforgeeks.org/how-to-optimize-the-performance-of-react-app/\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              Optimize the performance of React app\n            </a>\n            <br />\n            We can improve our react code by following these practices:\n            <ul>\n              <li>Using binding functions in constructors</li>\n              <li>\n                Eliminating the use of inline attributes as they slow the\n                process of loading\n              </li>\n              <li>Avoiding extra tags by using React fragments</li>\n              <li>Lazy loading</li>\n              <li>Avoid inline function in the render method</li>\n              <li>Avoid bundling all of the front end code in a single file</li>\n            </ul>\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>Props</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            In React, props (short for \"properties\") are used to pass data from\n            a parent component to a child component. They allow you to make\n            components dynamic and reusable by letting you pass different data\n            to them.\n            <ul>\n              <li>\n                <strong>Read-Only:</strong> Props are immutable, meaning they\n                cannot be changed by the component that receives them. They are\n                passed down from a parent component and are used to render or\n                configure the child component.\n              </li>\n              <li>\n                <strong>Passed from Parent to Child:</strong> Props are passed\n                to a child component as attributes in the JSX syntax. The child\n                component can then access these props using this.props in class\n                components or directly as arguments in functional components.\n              </li>\n              <li>\n                <strong>Dynamic Data:</strong> Props make components flexible by\n                allowing them to display different data based on what is passed\n                from the parent.\n              </li>\n            </ul>\n            <strong>In a Class Component:</strong>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                import React, { Component } from 'react';\n\n                class Greeting extends Component {\n                  render() {\n                    return <h1>Hello, {this.props.name}!</h1>;\n                  }\n                }\n\n                export default Greeting;\n              `}\n            />\n            <strong>In a Functional Component:</strong>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                import React from 'react';\n\n                function Greeting(props) {\n                  return <h1>Hello, {props.name}!</h1>;\n                }\n\n                export default Greeting;\n              `}\n            />\n            <strong>Passing props:</strong>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                import React from 'react';\n                import Greeting from './Greeting';\n\n                function App() {\n                  return (\n                    <div>\n                      <Greeting name=\"Alice\" />\n                      <Greeting name=\"Bob\" />\n                    </div>\n                  );\n                }\n\n                export default App;\n              `}\n            />\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography> state vs props</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            <TableContainer component={Paper} variant=\"outlined\">\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell></TableCell>\n                    <TableCell>State</TableCell>\n                    <TableCell>Props</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  <TableRow>\n                    <TableCell>Use</TableCell>\n                    <TableCell>\n                      Holds information about the components\n                    </TableCell>\n                    <TableCell>\n                      Allows to pass data from one component to other components\n                      as an argument\n                    </TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell>Mutability</TableCell>\n                    <TableCell>Is mutable</TableCell>\n                    <TableCell>Are immutable</TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell>Read-Only</TableCell>\n                    <TableCell>Can be changed</TableCell>\n                    <TableCell>Are read-only</TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell>Child components</TableCell>\n                    <TableCell>Child components cannot access</TableCell>\n                    <TableCell>Child component can access</TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell>Stateless components</TableCell>\n                    <TableCell>Cannot have state</TableCell>\n                    <TableCell>Can have props</TableCell>\n                  </TableRow>\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>higher-order component</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            A Higher-Order Component is a function that takes a component and\n            returns a new component. Essentially, it’s a function that enhances\n            a component by adding additional functionality or props.\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                const EnhancedComponent = higherOrderComponent(WrappedComponent);\n              `}\n            />\n            <ul>\n              <li>\n                <strong> Code reuse, logic, and bootstrap abstraction:</strong>\n                HOCs can extract common logic that can be shared among multiple\n                components.\n              </li>\n              <li>\n                <strong>State management:</strong> HOCs can manage state and\n                pass it as props to the wrapped component.\n              </li>\n              <li>\n                <strong>Enhancing UI:</strong> HOCs can modify the behavior or\n                appearance of a component.\n              </li>\n            </ul>\n            <strong>Create the HOC</strong>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                import React from 'react';\n\n                function withLogging(WrappedComponent) {\n                  return class extends React.Component {\n                    componentDidMount() {\n                      console.log('Component Mounted:', WrappedComponent.name);\n                    }\n\n                    render() {\n                      return <WrappedComponent {...this.props} />;\n                    }\n                  };\n                }\n              `}\n            />\n            <strong>Use the HOC</strong>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                import React from 'react';\n                import withLogging from './withLogging';\n\n                class MyComponent extends React.Component {\n                  render() {\n                    return <div>Hello, {this.props.name}!</div>;\n                  }\n                }\n\n                export default withLogging(MyComponent);\n              `}\n            />\n            <strong>Summary:</strong>\n            <ul>\n              <li>\n                Higher-Order Components are functions that take a component and\n                return a new component with added functionality.\n              </li>\n              <li>\n                They are used to reuse component logic, manage state, and handle\n                cross-cutting concerns.\n              </li>\n              <li>\n                HOCs follow the principle of composability and do not alter the\n                original component, making them a powerful pattern in React\n                development.\n              </li>\n            </ul>\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>React Router</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            React Router is a popular library for handling routing in React\n            applications. It allows you to build single-page applications (SPAs)\n            with navigation and URL management.\n            <strong>Router:</strong>\n            <ul>\n              <li>\n                <strong>Definition:</strong> The router is a component that\n                keeps track of the current URL and determines which components\n                should be rendered based on that URL.\n              </li>\n              <li>\n                <strong>Usage:</strong>BrowserRouter: Uses the HTML5 history API\n                to keep the UI in sync with the URL. <br />\n                HashRouter: Uses URL hash fragments to manage the history and\n                state of the URL.\n              </li>\n            </ul>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                import { BrowserRouter } from 'react-router-dom';\n\n                function App() {\n                  return (\n                    <BrowserRouter>\n                      {/* Routes and components go here */}\n                    </BrowserRouter>\n                  );\n                }\n              `}\n            />\n            <strong>Route:</strong>\n            <ul>\n              <li>\n                <strong>Definition:</strong> A Route defines a path and the\n                component to render when the URL matches that path.\n              </li>\n              <li>\n                <strong>Usage:</strong> You use the Route component to define\n                what should be rendered for different URL paths.\n              </li>\n            </ul>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                import { Route, Switch } from 'react-router-dom';\n\n                function App() {\n                  return (\n                    <BrowserRouter>\n                      <Switch>\n                        <Route path=\"/\" exact component={HomePage} />\n                        <Route path=\"/about\" component={AboutPage} />\n                        {/* Other routes */}\n                      </Switch>\n                    </BrowserRouter>\n                  );\n                }\n              `}\n            />\n            <strong>Link:</strong>\n            <ul>\n              <li>\n                <strong>Definition:</strong> The Link component is used to\n                navigate to different routes without reloading the page.\n              </li>\n              <li>\n                <strong>Usage:</strong>{\" \"}\n                {`It renders an anchor (<a>) tag with a href attribute that changes the URL when clicked.`}\n              </li>\n            </ul>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                import { Link } from 'react-router-dom';\n\n                function Navigation() {\n                  return (\n                    <nav>\n                      <Link to=\"/\">Home</Link>\n                      <Link to=\"/about\">About</Link>\n                    </nav>\n                  );\n                }\n              `}\n            />\n            <strong>Switch:</strong>\n            <ul>\n              <li>\n                <strong>Definition:</strong> The Switch component renders the\n                first Route or Redirect that matches the current location. It\n                ensures that only one route is rendered at a time.\n              </li>\n              <li>\n                <strong>Usage:</strong> Use Switch to group Route components and\n                render only the first matching route.\n              </li>\n            </ul>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                import { Switch, Route } from 'react-router-dom';\n\n                function App() {\n                  return (\n                    <BrowserRouter>\n                      <Switch>\n                        <Route path=\"/\" exact component={HomePage} />\n                        <Route path=\"/about\" component={AboutPage} />\n                        <Route component={NotFoundPage} />\n                      </Switch>\n                    </BrowserRouter>\n                  );\n                }\n              `}\n            />\n            <strong>Redirect:</strong>\n            <ul>\n              <li>\n                <strong>Definition:</strong> The Redirect component allows you\n                to redirect users to a different route programmatically.\n              </li>\n              <li>\n                <strong>Usage:</strong> You can use it to redirect users based\n                on certain conditions, like authentication status.\n              </li>\n            </ul>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                import { Redirect } from 'react-router-dom';\n\n                function PrivateRoute({ component: Component, ...rest }) {\n                  const isAuthenticated = /* logic to check authentication */;\n                  return (\n                    <Route\n                      {...rest}\n                      render={props =>\n                        isAuthenticated ? (\n                          <Component {...props} />\n                        ) : (\n                          <Redirect to=\"/login\" />\n                        )\n                      }\n                    />\n                  );\n                }\n              `}\n            />\n            <strong>useParams, useLocation, useHistory:</strong>\n            <ul>\n              <li>\n                <strong>Definition:</strong> Hooks provided by React Router for\n                accessing routing information in functional components.\n              </li>\n              <ul>\n                <li>\n                  <strong>useParams():</strong> Access URL parameters.\n                </li>\n                <li>\n                  <strong>useLocation():</strong> Access the current location\n                  object.\n                </li>\n                <li>\n                  <strong>useHistory():</strong> Access the history instance to\n                  programmatically navigate.\n                </li>\n              </ul>\n            </ul>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                import { useParams, useLocation, useHistory } from 'react-router-dom';\n\n                function ExampleComponent() {\n                  const { id } = useParams();\n                  const location = useLocation();\n                  const history = useHistory();\n\n                  const goHome = () => {\n                    history.push('/');\n                  };\n\n                  return (\n                    <div>\n                      <p>ID: {id}</p>\n                      <p>Current Path: {location.pathname}</p>\n                      <button onClick={goHome}>Go Home</button>\n                    </div>\n                  );\n                }\n              `}\n            />\n            <strong>Summary:</strong>\n            <ul>\n              <li>\n                React Router is a library for managing navigation and routing in\n                React applications.\n              </li>\n              <li>\n                <strong>Key Components:</strong> BrowserRouter, Route, Link,\n                Switch, Redirect.\n              </li>\n              <li>\n                <strong>Hooks:</strong> useParams, useLocation, useHistory for\n                accessing routing information in functional components.\n              </li>\n              <li>\n                <strong>Usage:</strong> Set up routing by defining routes and\n                linking to them, and handle navigation programmatically with\n                hooks.\n              </li>\n            </ul>\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>Styling in ReactJS</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            Styling in ReactJS can be done using various methods, each offering\n            different levels of control and flexibility.\n            <br />\n            <strong>CSS Stylesheets:</strong>\n            <br />\n            Traditional CSS files are imported into your React components. How\n            Create a .css file and import it into your component file.\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                /* styles.css */\n                  .container {\n                    padding: 20px;\n                    background-color: lightblue;\n                  }\n              `}\n            />\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                // Component.js\n                import React from 'react';\n                import './styles.css';\n\n                function MyComponent() {\n                  return <div className=\"container\">Hello, World!</div>;\n                }\n\n                export default MyComponent;\n              `}\n            />\n            <strong>Inline Styles</strong>\n            <br />\n            Inline styles are applied directly to elements using the style\n            attribute.Pass a JavaScript object to the style attribute.\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                function MyComponent() {\n                  const divStyle = {\n                    padding: '20px',\n                    backgroundColor: 'lightblue'\n                  };\n\n                  return <div style={divStyle}>Hello, World!</div>;\n                }\n\n                export default MyComponent;\n              `}\n            />\n            <strong>CSS Modules</strong>\n            <br />\n            CSS Modules allow for locally scoped CSS, preventing style\n            conflicts. Create a .module.css file and import it as a module.\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                /* styles.module.css */\n                .container {\n                  padding: 20px;\n                  background-color: lightblue;\n                }\n              `}\n            />\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                // Component.js\n                import React from 'react';\n                import styles from './styles.module.css';\n\n                function MyComponent() {\n                  return <div className={styles.container}>Hello, World!</div>;\n                }\n\n                export default MyComponent;\n              `}\n            />\n            <strong>Styled Components</strong>\n            <br />\n            Styled Components is a library for writing CSS-in-JS, allowing you\n            to style components using JavaScript. Install styled-components and\n            create styled components.\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                npm install styled-components\n              `}\n            />\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                // Component.js\n                import React from 'react';\n                import styled from 'styled-components';\n\n                const Container = styled.div\n                  background-color: lightblue;\n                  padding: 20px;\n\n                function MyComponent() {\n                  return <Container>Hello, World!</Container>;\n                }\n\n                export default MyComponent;\n              `}\n            />\n            <strong>Emotion</strong>\n            <br /> Emotion is another CSS-in-JS library for styling React\n            components with a powerful API. Install @emotion/react and\n            @emotion/styled, then use them for styling.\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                npm install @emotion/react @emotion/styled\n              `}\n            />\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                // Component.js\n                /** @jsxImportSource @emotion/react */\n                import { css } from '@emotion/react';\n                import styled from '@emotion/styled';\n\n                const containerStyle = css\n                  background-color: lightblue;\n                  padding: 20px;\n\n               const Container = styled.div\n                padding: 20px;\n                background-color: lightblue;\n\n\n                function MyComponent() {\n                  return (\n                    <div css={containerStyle}>\n                      Hello, World!\n                    </div>\n                    // or use <Container>Hello, World!</Container>\n                  );\n                }\n\n                export default MyComponent;\n              `}\n            />\n            <strong>Tailwind CSS</strong>\n            <br />\n            Tailwind CSS is a utility-first CSS framework that provides\n            low-level utility classes to build custom designs. Install Tailwind\n            CSS and use utility classes in your JSX.\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                npm install tailwindcss\n              `}\n            />\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                // Component.js\n                function MyComponent() {\n                  return <div className=\"p-5 bg-blue-200\">Hello, World!</div>;\n                }\n\n                export default MyComponent;\n              `}\n            />\n            <strong>CSS-in-JS</strong>\n            <br />\n            Usage: Various libraries (like styled-components and emotion)\n            provide the ability to write CSS directly in JavaScript files.\n            <br />\n            Benefits: Scoped styles, dynamic styling based on props, etc.\n            <br />\n            <strong>Summary:</strong>\n            <br />\n            <ul>\n              <li>CSS Stylesheets: Traditional approach; globally scoped.</li>\n              <li>\n                Inline Styles: Directly in the component; limited functionality.\n              </li>\n              <li>CSS Modules: Locally scoped styles; avoids conflicts.</li>\n              <li>\n                Styled Components & Emotion: CSS-in-JS solutions for scoped and\n                dynamic styling.\n              </li>\n              <li>Tailwind CSS: Utility-first framework for fast styling.</li>\n            </ul>\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>Conditional rendering in React</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            Conditional rendering in React involves selectively rendering\n            components based on specified conditions. By evaluating these\n            conditions, developers can control which components are displayed,\n            allowing for dynamic and responsive user interfaces in React\n            applications. <br />\n            Let us look at this sample code to understand conditional rendering.\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                {isLoggedIn == false ? <DisplayLoggedOut /> : <DisplayLoggedIn />}\n                 `}\n            />\n            Here if the boolean isLoggedIn is false then the DisplayLoggedOut\n            component will be rendered otherwise DisplayLoggedIn component will\n            be rendered.\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>Lifecycle methods of components</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            A React Component can go through four stages of its life as follows.\n            <ul>\n              <li>\n                <strong>Initialization:</strong> This is the stage where the\n                component is constructed with the given Props and default state.\n                This is done in the constructor of a Component Class.\n              </li>\n              <li>\n                <strong>Mounting:</strong> Mounting is the stage of rendering\n                the JSX returned by the render method itself.\n              </li>\n              <li>\n                <strong>Updating:</strong> Updating is the stage when the state\n                of a component is updated and the application is repainted.\n              </li>\n              <li>\n                <strong>Unmounting:</strong> As the name suggests Unmounting is\n                the final step of the component lifecycle where the component is\n                removed from the page.\n              </li>\n            </ul>\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>useref vs createRef</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            <TableContainer component={Paper} variant=\"outlined\">\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>useRef</TableCell>\n                    <TableCell>createRef</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  <TableRow>\n                    <TableCell>It is a hook.</TableCell>\n                    <TableCell>It is a function.</TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell>It uses the same ref throughout.</TableCell>\n                    <TableCell>It creates a new ref every time.</TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell>\n                      It saves its value between re-renders in a functional\n                      component.\n                    </TableCell>\n                    <TableCell>\n                      It creates a new ref for every re-render.\n                    </TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell>It returns a mutable ref object.</TableCell>\n                    <TableCell>It returns a read-only ref object.</TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell>\n                      The refs created using the useRef can persist for the\n                      entire component lifetime.\n                    </TableCell>\n                    <TableCell>\n                      The refs created using the createRef can be referenced\n                      throughout the component.\n                    </TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell>It is used in functional components.</TableCell>\n                    <TableCell>It is used in class components.</TableCell>\n                  </TableRow>\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n    </Container>\n  );\n};\n\nexport default ReactList;\n","import React, { useState } from \"react\";\nimport {\n  Container,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails,\n  Typography,\n} from \"@mui/material\";\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\nimport CodeSnippet from \"../CodeSnippet\";\n\nconst HtmlList = () => {\n  const [expanded, setExpanded] = useState(false);\n\n  const handleExpansion = () => {\n    setExpanded((prevExpanded) => !prevExpanded);\n  };\n\n  return (\n    <Container>\n      <Accordion expanded={expanded}\n        onChange={handleExpansion}>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>Redux</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            Redux is an open-source, JavaScript library used to manage the\n            application state. React uses Redux to build the user interface. It\n            is a predictable state container for JavaScript applications and is\n            used for the entire application’s state management.\n            <strong>Store</strong>\n            <ul>\n              <li>\n                <strong>Definition:</strong> The store is a central repository\n                that holds the entire state of the application.\n              </li>\n              <li>\n                <strong>Usage:</strong> There is typically one store per\n                application. It is created using the createStore function from\n                Redux.\n              </li>\n            </ul>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                import { createStore } from 'redux';\n                import rootReducer from './reducers';\n\n                const store = createStore(rootReducer);\n              `}\n            />\n            <strong>Actions:</strong>\n            <ul>\n              <li>\n                <strong>Definition:</strong> Actions are plain JavaScript\n                objects that represent an intention to change the state. Each\n                action has a type property and can also include additional data\n                (payload).\n              </li>\n              <li>\n                <strong>Usage:</strong> Actions are dispatched to signal that\n                something has happened that should update the state.\n              </li>\n            </ul>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                const incrementAction = {\n                  type: 'INCREMENT'\n                };\n\n                const setUserAction = (user) => ({\n                  type: 'SET_USER',\n                  payload: user\n                });\n              `}\n            />\n            <strong>Reducers:</strong>\n            <ul>\n              <li>\n                <strong>Definition:</strong> Reducers are pure functions that\n                specify how the state changes in response to actions. They take\n                the current state and an action as arguments and return a new\n                state.\n              </li>\n              <li>\n                <strong>Usage:</strong> Reducers are combined to form the root\n                reducer, which is used to create the store.\n              </li>\n            </ul>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                const counterReducer = (state = 0, action) => {\n                  switch (action.type) {\n                    case 'INCREMENT':\n                      return state + 1;\n                    default:\n                      return state;\n                  }\n                };\n\n                const rootReducer = combineReducers({\n                  counter: counterReducer,\n                  // other reducers\n                });\n              `}\n            />\n            <strong>Dispatch:</strong>\n            <ul>\n              <li>\n                <strong>Definition:</strong> dispatch is a method used to send\n                actions to the store. This triggers the reducers to process the\n                action and update the state.\n              </li>\n              <li>\n                <strong>Usage:</strong> Components or other parts of the\n                application use dispatch to send actions.\n              </li>\n            </ul>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                store.dispatch(incrementAction);\n              `}\n            />\n            <strong>Selectors:</strong>\n            <ul>\n              <li>\n                <strong>Definition:</strong> Selectors are functions that\n                extract and return a specific part of the state from the store.\n                They are used to retrieve and compute derived data from the\n                state.\n              </li>\n              <li>\n                <strong>Usage:</strong> Selectors help encapsulate and reuse\n                logic for accessing the state.\n              </li>\n            </ul>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                const selectCounter = (state) => state.counter;\n              `}\n            />\n            <strong>Middleware:</strong>\n            <ul>\n              <li>\n                <strong>Definition:</strong> Middleware is a way to extend\n                Redux's capabilities, such as handling asynchronous actions.\n                Common middleware includes Redux Thunk and Redux Saga.\n              </li>\n              <li>\n                <strong>Usage:</strong> Middleware can be applied when creating\n                the store to handle things like side effects or logging.\n              </li>\n            </ul>\n            <CodeSnippet\n              language=\"javascript\"\n              code={`\n                import thunk from 'redux-thunk';\n\n                const store = createStore(rootReducer, applyMiddleware(thunk));\n              `}\n            />\n            <strong>Summary:</strong>\n            <ul>\n              <li>\n                Redux provides a predictable state container for JavaScript\n                apps, helping manage and centralize state.\n              </li>\n              <li>\n                Core Concepts: Store, Actions, Reducers, Dispatch, Selectors,\n                Middleware.\n              </li>\n              <li>\n                Integration: Redux can be integrated with React using the\n                react-redux library, enabling components to access and update\n                the state.\n              </li>\n            </ul>\n            <strong>benfits of using react-redux</strong>\n            <ul>\n              <li>\n                It provides centralized state management i.e. a single store for\n                whole application\n              </li>\n              <li>\n                It optimizes performance as it prevents re-rendering of\n                component\n              </li>\n              <li>Makes the process of debugging easier</li>\n              <li>\n                Since it offers persistent state management therefore storing\n                data for long times become easier\n              </li>\n            </ul>\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n    </Container>\n  );\n};\n\nexport default HtmlList;\n","import React,  { useState } from \"react\";\nimport {\n  Container,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails,\n  Typography,\n} from \"@mui/material\";\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\nimport CodeSnippet from \"../CodeSnippet\";\n\nconst HtmlList = () => {\n  const [expanded, setExpanded] = useState(false);\n\n  const handleExpansion = () => {\n    setExpanded((prevExpanded) => !prevExpanded);\n  };\n\n  return (\n    <Container>\n      <Accordion expanded={expanded} onChange={handleExpansion}>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography>Python</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            Python is a widely-used general-purpose, high-level programming\n            language. It was created by Guido van Rossum in 1991 and further\n            developed by the Python Software Foundation. It was designed with an\n            emphasis on code readability, and its syntax allows programmers to\n            express their concepts in fewer lines of code.\n            <br />\n            <strong>It is used for:</strong>\n            <ul>\n              <li>System Scripting</li>\n              <li>Web Development</li>\n              <li>Game Development</li>\n              <li>Software Development</li>\n              <li>Complex Mathematics</li>\n            </ul>\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography></Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography></Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography></Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography></Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography></Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography></Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography></Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography></Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography></Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography></Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography></Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography></Typography>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel-content\"\n          id=\"panel-header\"\n        >\n          <Typography></Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography></Typography>\n        </AccordionDetails>\n      </Accordion>\n    </Container>\n  );\n};\n\nexport default HtmlList;\n","import React from \"react\";\nimport { Route, Routes } from \"react-router-dom\";\nimport Home from \"./pages/Home\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport HtmlList from \"./pages/HtmlList\";\nimport JavaScriptList from \"./pages/JavaScriptList\";\nimport ReactList from \"./pages/ReactList\";\nimport ReduxList from \"./pages/ReduxList\";\nimport PythonList from \"./pages/Python\";\nimport { Box } from \"@mui/material\";\n\nfunction App() {\n  console.log(\"Page app\");\n  return (\n    <>\n      <Header />\n      <Box sx={{ minHeight: \"calc(100vh - 60px)\" }}>\n        <Routes>\n          <Route path=\"/\" element={<Home />} />\n          <Route path=\"/htmlList\" element={<HtmlList />} />\n          <Route path=\"/javaScriptList\" element={<JavaScriptList />} />\n          <Route path=\"/reactList\" element={<ReactList />} />\n          <Route path=\"/reduxList\" element={<ReduxList />} />\n          <Route path=\"/pythonList\" element={<PythonList />} />\n        </Routes>\n      </Box>\n      <Footer />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { HashRouter } from 'react-router-dom';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <HashRouter>  {/* Wrap App with BrowserRouter */}\n    <App />\n  </HashRouter>\n);\n\nreportWebVitals();\n"],"sourceRoot":""}